<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel的博客</title>
  
  
  <link href="https://ymagic.github.io/atom.xml" rel="self"/>
  
  <link href="https://ymagic.github.io/"/>
  <updated>2022-07-19T07:16:03.884Z</updated>
  <id>https://ymagic.github.io/</id>
  
  <author>
    <name>Daniel·young</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存击穿、穿透和雪崩</title>
    <link href="https://ymagic.github.io/2022/04/25/huan-cun-ji-chuan-chuan-tou-he-xue-beng/"/>
    <id>https://ymagic.github.io/2022/04/25/huan-cun-ji-chuan-chuan-tou-he-xue-beng/</id>
    <published>2022-04-25T12:05:01.000Z</published>
    <updated>2022-07-19T07:16:03.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h3><p>在高并发下，查询一个不存在的值时，缓存不会被命中，导致大量请求直接落到数据库上。<strong>缓存穿透就是指，高并发下请求的是缓存和数据库中都没有的数据！</strong></p><p>对于缓存穿透问题，有一个很简单的解决方案，就是缓存null值，从缓存取不到的数据，在数据库中也没有取到，直接返回空值。</p><p>spring-cache中有个配置是这样的<code>spring.cache.redis.cache-null-values=true</code><br />带上该配置后，就可以缓存null值了，值得一提的是，这个缓存时间要设置的少一点，例如15秒就够，如果设置过长，会导致正常的缓存也无法使用</p><h3 id="缓存击穿"><a class="markdownIt-Anchor" href="#缓存击穿"></a> 缓存击穿</h3><p>在高并发下，对一个特定的值进行查询，但是这个时候缓存正好过期了，缓存没有命中，导致大量请求直接落到数据库上。<strong>缓存击穿是指，高并发下请求的是缓存没有，而数据库中有的数据！</strong></p><p>解决缓存击穿的最简单的方法就是限流，至于怎么限，其实可以各显神通！</p><p>这里就要说spring-cache的另一个配置了！</p><p>在缓存过期之后，如果多个线程同时请求对某个数据的访问，会同时去到数据库，导致数据库瞬间负荷增高。Spring4.3为@Cacheable注解提供了一个新的参数“sync”（boolean类型，缺省为false），当设置它为true时，只有一个线程的请求回去到数据库，其他线程都会等待直到缓存可用。这个设置可以减少对数据库的瞬间并发访问。</p><p>所以解决方法就是，加一个属性sync=true， 就行。代码如下<code>@Cacheable(cacheNames=&quot;menu&quot;, sync=&quot;true&quot;)</code>用了该属性后，可以指示底层将缓存锁住，使只有一个线程可以进入计算，而其他线程堵塞，直到返回结果更新到缓存中。</p><p>当然，到这里，可能有人会抬杠！你这个只是针对单机的限流，并不是整个集群的限流！假设你的集群搭建了3000个pod，最差的情况下就是，3000个pod上，每个pod都会发起一个请求去数据库查询，照样还是会导致数据库连接数不够用，等等资源问题！</p><p>如果非要解决，也有办法。spring的aop有套路的，比如@Transactional的Advice是TransactionInterceptor，那么cache也对应一个CacheInterceptor, 我们只要去改CacheInteraceptor，这个切面就能解决，在里头做一个分布式锁！伪代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag  = 取分布式锁</span><br><span class="line">if (flag) &#123;</span><br><span class="line">走数据库查询，并缓存结果</span><br><span class="line">&#125; else &#123;</span><br><span class="line">睡眠一段时间，再次尝试获取key的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，真没有必要～～ 立足实际出发，但凡你的业务到了那种级别，是可以做到区域部署的，完全可以规避这类问题。</p><h3 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h3><p>在高并发下，大量的缓存key在同一时间失效，导致大量的请求落到数据库上。那么针对该问题，最简单的解决方法就是，过期的时间加随机值！</p><p>但是很麻烦的是，我们在使用@Cacheable注解的时候，原生功能没法直接设置随机过期时间的。</p><p>老实说，这个真没啥好方法，只能自己继承RedisCache，对其增强，改写其中的put方法，带上随机时间！</p>]]></content>
    
    
    <summary type="html">缓存击穿、穿透和雪崩</summary>
    
    
    
    <category term="缓存" scheme="https://ymagic.github.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="缓存" scheme="https://ymagic.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>homebrew</title>
    <link href="https://ymagic.github.io/2022/01/21/homebrew/"/>
    <id>https://ymagic.github.io/2022/01/21/homebrew/</id>
    <published>2022-01-21T03:28:50.000Z</published>
    <updated>2022-07-19T07:16:53.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2><p>Homebrew 的两个术语：</p><ul><li>Formulae：软件包，包括了这个软件的依赖、源码位置及编译方法等；</li><li>Casks：已经编译好的应用包，如图形界面程序等。</li></ul><p>Homebrw相关的几个文件夹用途：</p><ul><li>bin：用于存放所安装程序的启动链接（相当于快捷方式）</li><li>etc：brew安装程序的配置文件默认存放路径</li><li>Library：Homebrew 系统自身文件夹</li><li>Cellar：通过brew安装的程序将以 [程序名/版本号] 存放于本目录下</li></ul><p>常用的 brew 命令：</p><ul><li>查看brew版本：brew -v</li><li>更新brew版本：brew update</li><li>本地软件库列表：brew list</li><li>查看软件库版本：brew list --versions</li><li>查找软件包：brew search xxx （xxx为要查找软件的关键词）</li><li><strong>安装软件包：brew install xxx （xxx为软件包名称）</strong></li><li>卸载软件包：brew uninstall xxx</li><li><strong>安装软件：brew install xxx --cask（xxx为软件名称）</strong></li><li>卸载软件：brew cask uninstall xxx</li><li>查找软件安装位置：which xxx （xxx为软件名称）</li></ul><p>（brew install 用来安装一些不带界面的命令行工具和第三方库；brew cask install 用来安装一些带界面的应用软件）</p><h2 id="1-brew-install"><a class="markdownIt-Anchor" href="#1-brew-install"></a> 1. brew install</h2><p>brew 的官方网站： <a href="http://brew.sh/">http://brew.sh/</a>  在官方网站对brew的用法进行了详细的描述</p><p>安装方法： 在Mac中打开Termal: 输入命令：</p><p><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</code></p><p>对于对程序员只需通过简单的指令，就能快速安装和升级本地的各种开发环境，非常快捷方便。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;标签&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#标签&quot;&gt;&lt;/a&gt; 标签&lt;/h2&gt;
&lt;p&gt;Homebrew 的两个术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formulae：软件包，包括了这个软件的依赖、源码位置及编译方法等；&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="homebrew" scheme="https://ymagic.github.io/categories/homebrew/"/>
    
    
    <category term="homebrew" scheme="https://ymagic.github.io/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>mac安装openjdk17</title>
    <link href="https://ymagic.github.io/2021/12/08/mac-an-zhuang-openjdk17/"/>
    <id>https://ymagic.github.io/2021/12/08/mac-an-zhuang-openjdk17/</id>
    <published>2021-12-08T15:45:03.000Z</published>
    <updated>2022-07-20T02:16:31.421Z</updated>
    
    <content type="html"><![CDATA[<p>声明：不适用于M1芯片的mac系列。</p><p>本文将使用mac的安装软件管理神器–&gt;<a href="https://brew.sh/">Homebrew</a>，请自行按官网步骤安装。</p><h2 id="安装并配置-jdk"><a class="markdownIt-Anchor" href="#安装并配置-jdk"></a> 安装并配置 JDK</h2><h4 id="安装openjdk"><a class="markdownIt-Anchor" href="#安装openjdk"></a> 安装Openjdk</h4><p><code>brew search openjdk</code> 后会出现如图中的情况</p><p><img src="/images/mac%E5%AE%89%E8%A3%85openjdk17/search.png" alt="搜索openjdk" /></p><p>可以使用<code>brew info openjdk@17</code> 看一下openjdk@17的安装信息。</p><p><img src="/images/mac%E5%AE%89%E8%A3%85openjdk17/openjdk@17info.jpg" alt="openjdk17安装信息" /></p><p>Dependencies 为brew 安装openjdk@17需要依赖的其他package</p><p>Analytics 为openjdk@17现阶段的安装统计相关的信息</p><p>下面直接安装<code>brew install openjdk@17</code> 。安装的时间取决于网速的快慢。</p><h4 id="配置jdk"><a class="markdownIt-Anchor" href="#配置jdk"></a> 配置jdk</h4><p>Mac 下如果让你安装的JDK 生效及可识别需要如下几步操作。</p><p>执行如下命令</p><p><code>sudo ln -sfn /usr/local/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk</code></p><p>检查<code>tree /Library/Java</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ tree /Library/Java</span><br><span class="line">/Library/Java</span><br><span class="line">├── Extensions</span><br><span class="line">└── JavaVirtualMachines</span><br><span class="line">    └── openjdk-17.jdk -&gt; /usr/local/opt/openjdk@17/libexec/openjdk.jdk</span><br></pre></td></tr></table></figure><p>执行<code>/usr/libexec/java_home</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ /usr/libexec/java_home</span><br><span class="line">/usr/local/Cellar/openjdk@17/17.0.3/libexec/openjdk.jdk/Contents/Home</span><br></pre></td></tr></table></figure><h2 id="多版本jdk切换"><a class="markdownIt-Anchor" href="#多版本jdk切换"></a> 多版本jdk切换</h2><h4 id="配置环境"><a class="markdownIt-Anchor" href="#配置环境"></a> 配置环境</h4><p>Mac 下通过 bash_profile 文件来对环境信息进行配置。执行以下命令打开配置文件：<code>vim ~/.bash_profile</code></p><p>根据环境变量信息新增JDK几个版本的相关内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Java Config : Java家配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA17_HOME=/Library/Java/JavaVirtualMachines/openjdk-17.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># config alias: 配置别名</span></span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA8_HOME</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> jdk17=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA17_HOME</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config default :jdk 配置默认JDK</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA8_HOME</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$JAVA_HOME</span>:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure><p>保存上述的配置，对.bash_profile进行编译生效 <code>source ~/.bash_profile</code></p><p>然后在终端执行<code>java -version</code> 会发现jdk版本正常显示为jdk8</p><h4 id="任意切换jdk环境"><a class="markdownIt-Anchor" href="#任意切换jdk环境"></a> 任意切换Jdk环境</h4><p>如需要将 jdk 版本切换为 jdk17，直接输入 JDK17 环境变量的别名：jdk17 即可,然后查看版本，输入jdk8则切换到jdk8版本</p>]]></content>
    
    
    <summary type="html">环境：MacBook Pro (16-inch, 2019) 处理器Intel Core i9 系统macOS Big Sur 11.6.5</summary>
    
    
    
    <category term="mac" scheme="https://ymagic.github.io/categories/mac/"/>
    
    <category term="openjdk" scheme="https://ymagic.github.io/categories/mac/openjdk/"/>
    
    
    <category term="mac" scheme="https://ymagic.github.io/tags/mac/"/>
    
    <category term="openjdk" scheme="https://ymagic.github.io/tags/openjdk/"/>
    
  </entry>
  
  <entry>
    <title>mac快捷键之iTerm2篇</title>
    <link href="https://ymagic.github.io/2021/10/21/mac-kuai-jie-jian-zhi-iterm2-pian/"/>
    <id>https://ymagic.github.io/2021/10/21/mac-kuai-jie-jian-zhi-iterm2-pian/</id>
    <published>2021-10-21T03:28:50.000Z</published>
    <updated>2022-07-19T07:25:39.523Z</updated>
    
    <content type="html"><![CDATA[<p>iterm2 常用的快捷键记录</p><span id="more"></span><h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2><ul><li>新建标签：⌘ + t</li><li>关闭标签：⌘ + w</li><li>切换标签：⌘ + 数字 ⌘ + 左右方向键</li><li>切换全屏：⌘ + enter</li><li>查找：⌘ + f</li></ul><h2 id="分屏"><a class="markdownIt-Anchor" href="#分屏"></a> 分屏</h2><ul><li>垂直分屏：⌘ + d</li><li>水平分屏：⌘ + shift + d</li><li>切换屏幕：⌘ + option + 方向键 ⌘ + [ 或 ⌘ + ]</li><li>查看历史命令：⌘ + ;</li><li>查看剪贴板历史：⌘ + shift + h</li></ul><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li>清除当前行：ctrl + u</li><li>到行首：ctrl + a</li><li>到行尾：ctrl + e</li><li>前进后退：ctrl + f/b (相当于左右方向键)</li><li>上一条命令：ctrl + p</li><li>搜索命令历史：ctrl + r</li><li>删除当前光标的字符：ctrl + d</li><li>删除光标之前的字符：ctrl + h</li><li>删除光标之前的单词：ctrl + w</li><li>删除到文本末尾：ctrl + k</li><li>交换光标处文本：ctrl + t</li><li>清屏1：⌘ + r</li><li>清屏2：ctrl + l</li></ul><h2 id="很实用的功能快捷键"><a class="markdownIt-Anchor" href="#很实用的功能快捷键"></a> 很实用的功能/快捷键</h2><ul><li>⌘ + 数字在各 tab 标签直接来回切换</li><li>选择即复制 + 鼠标中键粘贴，这个很实用</li><li>⌘ + f 所查找的内容会被自动复制</li><li>⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏</li><li>⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</li><li>ctrl + u 清空当前行，无论光标在什么位置</li><li>输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</li><li>⌘ + shift + h 会列出剪切板历史</li><li>可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</li></ul><h3 id="常用的快捷键"><a class="markdownIt-Anchor" href="#常用的快捷键"></a> 常用的快捷键</h3><ul><li>⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了</li><li>⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e</li><li>⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了<br />设置方法如下</li></ul><p>当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合</p><ul><li>C+a / C+e 这个几乎在哪都可以使用</li><li>C+p / !! 上一条命令</li><li>C+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)</li><li>C+w A+d 从光标处删至字首/尾</li><li>C+h C+d 删掉光标前后的自负</li><li>C+y 粘贴至光标后</li><li>C+r 搜索命令历史，这个较常用</li></ul><h2 id="选择喜欢的配色方案"><a class="markdownIt-Anchor" href="#选择喜欢的配色方案"></a> 选择喜欢的配色方案。</h2><p>在Preferences-&gt;Profiles-&gt;Colors的load presets可以选择某个配色方案。也可以自己下载。在网站http://iterm2colorschemes.com/，几乎可以找到所有可用的配色方案。<br />选中即复制</p><p>iterm2有2种好用的选中即复制模式。<br />一种是用鼠标，在iterm2中，选中某个路径或者某个词汇，那么，iterm2就自动复制了。<br />另一种是无鼠标模式，⌘+f,弹出iterm2的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入tab，查找窗口将自动变化内容，并将其复制。如果输入的是shift+tab，则自动将查找内容的左边选中并复制。<br />路径重复</p><p>在新Tab中自动使用前一Tab路径，如此设置：</p><p>屏幕切割</p><ul><li>⌘+d：垂直分割；</li><li>⌘+shift+d：水平分割</li></ul><p>系统热键</p><p>设置好系统热线之后，将在正常的浏览器或者编辑器等窗口的上面，以半透明窗口形式直接调出iterm2 shell。</p><p>按下同样的系统热键之后，将自动隐藏。这样非常有利于随时随地处理。<br />自动完成</p><p>输入打头几个字母，然后输入⌘+; iterm2将自动列出之前输入过的类似命令。</p><p>剪切历史</p><p>输入⌘+shift+h，iterm2将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在Preferences &gt; General &gt; Save copy/paste history to disk.中设置。</p><p>全屏切换</p><ul><li>⌘+enter进入与返回全屏模式<br />Exposé所有Tab</li></ul><p>⌘+option+e,并且可以搜索<br />保存当前快照</p><p>Window &gt; Save Window Arrangement.<br />同样，恢复快照：</p><p>Window &gt; Restore Window Arrangement<br />可以在Preferences &gt; General &gt; Open saved window arrangement.设置自动恢复快照</p>]]></content>
    
    
    <summary type="html">mac快捷键之iTerm2篇</summary>
    
    
    
    <category term="mac快捷键" scheme="https://ymagic.github.io/categories/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="iTerm2" scheme="https://ymagic.github.io/categories/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/iTerm2/"/>
    
    
    <category term="mac快捷键" scheme="https://ymagic.github.io/tags/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="iTerm2" scheme="https://ymagic.github.io/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>mac快捷键之idea篇</title>
    <link href="https://ymagic.github.io/2021/10/21/mac-kuai-jie-jian-zhi-idea-pian/"/>
    <id>https://ymagic.github.io/2021/10/21/mac-kuai-jie-jian-zhi-idea-pian/</id>
    <published>2021-10-21T03:16:40.000Z</published>
    <updated>2022-07-19T07:25:34.506Z</updated>
    
    <content type="html"><![CDATA[<p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键。</p><span id="more"></span><h2 id="mac键盘符号和修饰键说明"><a class="markdownIt-Anchor" href="#mac键盘符号和修饰键说明"></a> Mac键盘符号和修饰键说明</h2><ul><li>⌘ Command</li><li>⇧ Shift</li><li>⌥ Option</li><li>⌃ Control</li><li>↩︎ Return/Enter</li><li>⌫ Delete</li><li>⌦ 向前删除键（Fn+Delete）</li><li>↑ 上箭头</li><li>↓ 下箭头</li><li>← 左箭头</li><li>→ 右箭头</li><li>⇞ Page Up（Fn+↑）</li><li>⇟ Page Down（Fn+↓）</li><li>Home （Fn + ←）</li><li>End （Fn + →）</li><li>⇥ 右制表符（Tab键）</li><li>⇤ 左制表符（Shift+Tab）</li><li>⎋ Escape (Esc)</li><li>一、Editing（编辑）</li><li>⌃Space 基本的代码补全（补全任何类、方法、变量）</li><li>⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）</li><li>⌘⇧↩ 自动结束代码，行末自动添加分号</li><li>⌘P 显示方法的参数信息</li><li>⌃J, Mid. button click 快速查看文档</li><li>⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li><li>⌘+鼠标放在代码上 显示代码简要信息</li><li>⌘F1 在错误或警告处显示具体描述信息</li><li>⌘F12 查找类中方法</li><li>⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li>⌃O 覆盖方法（重写父类方法）</li><li>⌃I 实现方法（实现接口中的方法）</li><li>⌘⌥T 包围代码（使用if…else, try…catch, for, synchronized等包围选中的代码）</li><li>⌘/ 注释/取消注释与行注释</li><li>⌘⌥/ 注释/取消注释与块注释</li><li>⌥↑ 连续选中代码块</li><li>⌥↓ 减少当前选中的代码块</li><li>⌃⇧Q 显示上下文信息</li><li>⌥↩ 显示意向动作和快速修复代码</li><li>⌘⌥L 格式化代码</li><li>⌃⌥O 优化import</li><li>⌃⌥I 自动缩进线</li><li>⇥ / ⇧⇥ 缩进代码 / 反缩进代码</li><li>⌘X 剪切当前行或选定的块到剪贴板</li><li>⌘C 复制当前行或选定的块到剪贴板</li><li>⌘V 从剪贴板粘贴</li><li>⌘⇧V 从最近的缓冲区粘贴</li><li>⌘D 复制当前行或选定的块</li><li>⌘⌫ 删除当前行或选定的块的行</li><li>⌃⇧J 智能的将代码拼接成一行</li><li>⌘↩ 智能的拆分拼接的行</li><li>⇧↩ 开始新的一行</li><li>⌘⇧U 大小写切换</li><li>⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始</li><li>⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete）</li><li>⌥⌫ 删除到单词的开头</li><li>⌘+ / ⌘- 展开 / 折叠代码块</li><li>⌘⇧+ 展开所以代码块</li><li>⌘⇧- 折叠所有代码块</li><li>⌘W 关闭活动的编辑器选项卡</li></ul><h2 id="二-searchreplace查询替换"><a class="markdownIt-Anchor" href="#二-searchreplace查询替换"></a> 二、Search/Replace（查询/替换）</h2><ul><li>Double ⇧ 查询任何东西</li><li>⌘F 文件内查找</li><li>⌘G 查找模式下，向下查找</li><li>⌘⇧G 查找模式下，向上查找</li><li>⌘R 文件内替换</li><li>⌘⇧F 全局查找（根据路径）</li><li>⌘⇧R 全局替换（根据路径）</li><li>⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li><li>⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li></ul><h2 id="三-usage-search使用查询"><a class="markdownIt-Anchor" href="#三-usage-search使用查询"></a> 三、Usage Search（使用查询）</h2><ul><li>⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法</li><li>⌘⇧F7 在文件中突出显示的用法</li><li>⌘⌥F7 显示用法</li><li>⌘⇧I 查看定义的类,快速查看</li></ul><h2 id="四-compile-and-run编译和运行"><a class="markdownIt-Anchor" href="#四-compile-and-run编译和运行"></a> 四、Compile and Run（编译和运行）</h2><ul><li>⌘F9 编译Project</li><li>⌘⇧F9 编译选择的文件、包或模块</li><li>⌃⌥R 弹出 Run 的可选择菜单</li><li>⌃⌥D 弹出 Debug 的可选择菜单</li><li>⌃R 运行</li><li>⌃D 调试</li><li>⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置</li></ul><h2 id="五-debugging调试"><a class="markdownIt-Anchor" href="#五-debugging调试"></a> 五、Debugging（调试）</h2><ul><li>F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li>F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li>⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li>⇧F8 跳出</li><li>⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点</li><li>⌥F8 计算表达式（可以更改变量值使其生效）</li><li>⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li>⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li>⌘⇧F8 查看断点信息</li></ul><h2 id="六-navigation导航"><a class="markdownIt-Anchor" href="#六-navigation导航"></a> 六、Navigation（导航）</h2><ul><li>⌘O 查找类文件</li><li>⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li><li>⌘⌥O 前往指定的变量 / 方法</li><li>⌃← / ⌃→ 左右切换打开的编辑tab页</li><li>F12 返回到前一个工具窗口</li><li>⎋ 从工具窗口进入代码文件窗口</li><li>⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li>⌘⇧F4 关闭活动run/messages/find/… tab</li><li>⌘L 在当前文件跳转到某一行的指定处</li><li>⌘E 显示最近打开的文件记录列表</li><li>⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方</li><li>⌘⇧⌫ 跳转到最后一个编辑的地方</li><li>⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li>⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处</li><li>⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li>⌥ Space, ⌘Y 快速打开光标所在方法、类的定义</li><li>⌃⇧B 跳转到类型声明处</li><li>⌘U 前往当前光标所在方法的父类的方法 / 接口定义</li><li>⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置</li><li>⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置</li><li>⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li><li>⌃H 显示当前类的层次结构</li><li>⌘⇧H 显示方法层次结构</li><li>⌃⌥H 显示调用层次结构</li><li>F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置</li><li>F4 / ⌘↓ 编辑/查看代码源</li><li>⌥ Home 显示到当前文件的导航条</li><li>F3选中文件/文件夹/代码行，添加/取消书签</li><li>⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li>⌃0…⌃9 定位到对应数值的书签位置</li><li>⌘F3 显示所有书签</li></ul><h2 id="七-refactoring重构"><a class="markdownIt-Anchor" href="#七-refactoring重构"></a> 七、Refactoring（重构）</h2><ul><li>F5 复制文件到指定目录</li><li>F6 移动文件到指定目录</li><li>⌘⌫ 在文件上为安全删除文件，弹出确认框</li><li>⇧F6 重命名文件</li><li>⌘F6 更改签名</li><li>⌘⌥N 一致性</li><li>⌘⌥M 将选中的代码提取为方法</li><li>⌘⌥V 提取变量</li><li>⌘⌥F 提取字段</li><li>⌘⌥C 提取常量</li><li>⌘⌥P 提取参数</li></ul><h2 id="八-vcslocal-history版本控制本地历史记录"><a class="markdownIt-Anchor" href="#八-vcslocal-history版本控制本地历史记录"></a> 八、VCS/Local History（版本控制/本地历史记录）</h2><ul><li>⌘K 提交代码到版本控制器</li><li>⌘T 从版本控制器更新代码</li><li>⌥⇧C 查看最近的变更记录</li><li>⌃C 快速弹出版本控制器操作面板</li></ul><h2 id="九-live-templates动态代码模板"><a class="markdownIt-Anchor" href="#九-live-templates动态代码模板"></a> 九、Live Templates（动态代码模板）</h2><ul><li>⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住</li><li>⌘J 插入自定义动态代码模板</li></ul><h2 id="十-general通用"><a class="markdownIt-Anchor" href="#十-general通用"></a> 十、General（通用）</h2><ul><li>⌘1…⌘9 打开相应编号的工具窗口</li><li>⌘S 保存所有</li><li>⌘⌥Y 同步、刷新</li><li>⌃⌘F 切换全屏模式</li><li>⌘⇧F12 切换最大化编辑器</li><li>⌥⇧F 添加到收藏夹</li><li>⌥⇧I 检查当前文件与当前的配置文件</li><li>§⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等）</li><li>⌘, 打开IDEA系统设置</li><li>⌘; 打开项目结构对话框</li><li>⇧⌘A 查找动作（可设置相关选项）</li><li>⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li></ul><h2 id="十一-other一些官方文档上没有体现的快捷键"><a class="markdownIt-Anchor" href="#十一-other一些官方文档上没有体现的快捷键"></a> 十一、Other（一些官方文档上没有体现的快捷键）</h2><ul><li>⌘⇧8 竖编辑模式</li></ul>]]></content>
    
    
    <summary type="html">mac快捷键之idea篇</summary>
    
    
    
    <category term="mac快捷键" scheme="https://ymagic.github.io/categories/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="idea" scheme="https://ymagic.github.io/categories/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/idea/"/>
    
    
    <category term="mac快捷键" scheme="https://ymagic.github.io/tags/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="idea" scheme="https://ymagic.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>mac快捷键之浏览器篇</title>
    <link href="https://ymagic.github.io/2021/10/21/mac-kuai-jie-jian-zhi-liu-lan-qi-pian/"/>
    <id>https://ymagic.github.io/2021/10/21/mac-kuai-jie-jian-zhi-liu-lan-qi-pian/</id>
    <published>2021-10-21T03:05:24.000Z</published>
    <updated>2022-07-19T07:25:22.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1标签tab操作"><a class="markdownIt-Anchor" href="#1标签tab操作"></a> 1.标签（tab）操作：</h3><ul><li>command+R（刷新页面，支持Safari和Chrome）</li><li>command++/-/0（放大、缩小、还原，支持Safari和Chrome）</li><li>command+T（新建标签页，支持Safari和Chrome）Command+N是新建单独窗口</li><li>command+L（定位到地址栏，支持Safari和Chrome）</li><li>command+Y（打开历史访问，支持Safari和Chrome）</li><li>command+Shift+N（新建隐私浏览窗口，支持Safari和Chrome）</li><li>command+Option+U：显示源代码</li><li>command+Option+I：开发者工具</li><li>command+D：收藏</li><li>command+Shift+J：打开下载（Chrome）</li><li>command+Z：恢复最近关闭的标签页</li><li>command+W：关闭当前标签页</li><li>command+.：停止刷新重载</li></ul><h3 id="2书签bookmarks操作"><a class="markdownIt-Anchor" href="#2书签bookmarks操作"></a> 2.书签（bookmarks）操作：</h3><ul><li>control+command+1: 显示书签边栏</li><li>command+D：添加到收藏夹（书签栏）</li><li>option+command+B：管理/编辑书签页</li></ul>]]></content>
    
    
    <summary type="html">mac快捷键之浏览器篇</summary>
    
    
    
    <category term="mac快捷键" scheme="https://ymagic.github.io/categories/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="浏览器" scheme="https://ymagic.github.io/categories/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="mac快捷键" scheme="https://ymagic.github.io/tags/mac%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker上安装nacos</title>
    <link href="https://ymagic.github.io/2021/05/13/docker-shang-an-zhuang-nacos/"/>
    <id>https://ymagic.github.io/2021/05/13/docker-shang-an-zhuang-nacos/</id>
    <published>2021-05-13T05:58:03.000Z</published>
    <updated>2022-07-19T07:16:32.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-上启动nacos-server-服务"><a class="markdownIt-Anchor" href="#docker-上启动nacos-server-服务"></a> Docker 上启动nacos-server 服务</h2><ol><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><ol start="2"><li>挂载目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/nacos/logs/                      <span class="comment">#新建logs目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /home/nacos/init.d/          </span><br><span class="line">vim /home/nacos/init.d/custom.properties        <span class="comment">#修改配置文件</span></span><br></pre></td></tr></table></figure><p>添加如下参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server.contextPath=/nacos</span><br><span class="line">server.servlet.contextPath=/nacos</span><br><span class="line">server.port=8848</span><br><span class="line"></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://xx.xx.xx.x:3306/nacos_devtest_prod?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><br><span class="line">db.user=user</span><br><span class="line">db.password=pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nacos.cmdb.dumpTaskInterval=3600</span><br><span class="line">nacos.cmdb.eventTaskInterval=10</span><br><span class="line">nacos.cmdb.labelTaskInterval=300</span><br><span class="line">nacos.cmdb.loadDataAtStart=false</span><br><span class="line"></span><br><span class="line">management.metrics.export.elastic.enabled=false</span><br><span class="line"></span><br><span class="line">management.metrics.export.influx.enabled=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.enabled=true</span><br><span class="line">server.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nacos.security.ignore.urls=/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span><br><span class="line">nacos.naming.distro.taskDispatchThreadCount=1</span><br><span class="line">nacos.naming.distro.taskDispatchPeriod=200</span><br><span class="line">nacos.naming.distro.batchSyncKeyCount=1000</span><br><span class="line">nacos.naming.distro.initDataRatio=0.9</span><br><span class="line">nacos.naming.distro.syncRetryDelay=5000</span><br><span class="line">nacos.naming.data.warmup=true</span><br><span class="line">nacos.naming.expireInstance=true</span><br></pre></td></tr></table></figure><ol start="3"><li><p>mysql5初始化数据库<br />脚本：<a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql</a></p></li><li><p>启动容器</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker  run \</span><br><span class="line">--name nacos -d \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-e JVM_XMS=256m \</span><br><span class="line">-e JVM_XMX=256m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=替换具体数据库实例 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=数据库\</span><br><span class="line">-e MYSQL_SERVICE_PORT=数据库端口\</span><br><span class="line">-e MYSQL_SERVICE_USER=数据库用户名\</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=数据库密码\</span><br><span class="line">-v /home/nacos/logs:/home/nacos/logs \</span><br><span class="line">-v /home/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker上安装nacos记录</summary>
    
    
    
    <category term="SpringCloud" scheme="https://ymagic.github.io/categories/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="https://ymagic.github.io/tags/SpringCloud/"/>
    
    <category term="nacos" scheme="https://ymagic.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>Sql优化</title>
    <link href="https://ymagic.github.io/2020/10/02/sql-you-hua/"/>
    <id>https://ymagic.github.io/2020/10/02/sql-you-hua/</id>
    <published>2020-10-02T02:11:31.000Z</published>
    <updated>2022-07-19T07:25:58.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql优化"><a class="markdownIt-Anchor" href="#sql优化"></a> sql优化</h1><p>MySQL层优化我一般遵从五个原则：</p><ol><li>减少数据访问： 设置合理的字段类型，启用压缩，通过索引访问等减少磁盘IO</li><li>返回更少的数据： 只返回需要的字段和数据分页处理 减少磁盘io及网络io</li><li>减少交互次数： 批量DML操作，函数存储等减少数据连接次数</li><li>减少服务器CPU开销： 尽量减少数据库排序操作以及全表查询，减少cpu 内存占用</li><li>利用更多资源： 使用表分区，可以增加并行操作，更大限度利用cpu资源</li></ol><p>总结到SQL优化中，就三点:</p><ul><li>最大化利用索引；</li><li>尽可能避免全表扫描；</li><li>减少无效数据的查询；</li></ul><p>SELECT语句 - 语法顺序：</p><ol><li><code>SELECT</code></li><li><code>DISTINCT &lt;select_list&gt;</code></li><li><code>FROM &lt;left_table&gt;</code></li><li><code>&lt;join_type&gt; JOIN &lt;right_table&gt;</code></li><li><code>ON &lt;join_condition&gt;</code></li><li><code>WHERE &lt;where_condition&gt;</code></li><li><code>GROUP BY &lt;group_by_list&gt;</code></li><li><code>HAVING &lt;having_condition&gt;</code></li><li><code>ORDER BY &lt;order_by_condition&gt;</code></li><li><code>LIMIT &lt;limit_number&gt;</code></li></ol><p>SELECT语句 - 执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FROM</span><br><span class="line">&lt;表名&gt; # 选取表，将多个表数据通过笛卡尔积变成一个表。</span><br><span class="line">ON</span><br><span class="line">&lt;筛选条件&gt; # 对笛卡尔积的虚表进行筛选</span><br><span class="line">JOIN&lt;join, left join, right join...&gt;</span><br><span class="line">&lt;join表&gt; # 指定join，用于添加数据到on之后的虚表中，例如left join会将左表的剩余数据添加到虚表中</span><br><span class="line">WHERE</span><br><span class="line">&lt;where条件&gt; # 对上述虚表进行筛选</span><br><span class="line">GROUP BY</span><br><span class="line">&lt;分组条件&gt; # 分组</span><br><span class="line">&lt;SUM()等聚合函数&gt; # 用于having子句进行判断，在书写上这类聚合函数是写在having判断里面的</span><br><span class="line">HAVING</span><br><span class="line">&lt;分组筛选&gt; # 对分组后的结果进行聚合筛选</span><br><span class="line">SELECT</span><br><span class="line">&lt;返回数据列表&gt; # 返回的单列必须在group by子句中，聚合函数除外</span><br><span class="line">DISTINCT</span><br><span class="line">#数据除重</span><br><span class="line">ORDER BY</span><br><span class="line">&lt;排序条件&gt; # 排序</span><br><span class="line">LIMIT</span><br><span class="line">&lt;行数限制&gt;</span><br></pre></td></tr></table></figure><h2 id="sql优化策略"><a class="markdownIt-Anchor" href="#sql优化策略"></a> SQL优化策略</h2><p>一. 避免不走索引的场景<br />二. SELECT语句其他优化</p><ol><li>避免出现select *, 使用具体字段</li><li>避免出现不确定结果的函数</li><li>多表关联查询时，小表在前，大表在后</li><li>使用表的别名</li><li>用where字句替换HAVING字句</li><li>调整Where字句中的连接顺序<br />MySQL采用从左往右，自上而下的顺序解析where子句。根据这个原理，应将过滤数据多的条件往前放，最快速度缩小结果集</li></ol><p>三、增删改 DML 语句优化</p><ol><li>大批量插入数据</li><li>适当使用commit<br />适当使用commit可以释放事务占用的资源而减少消耗，commit后能释放的资源如下：</li></ol><ul><li>事务占用的undo数据块；</li><li>事务在redo log中记录的数据块；</li><li>释放事务施加的，减少锁争用影响性能。特别是在需要使用delete删除大量数据的时候，必须分解删除量并定期commit</li></ul><ol start="3"><li>避免重复查询更新的数据</li></ol><p>四、查询条件优化</p><ol><li><p>对于复杂的查询，可以使用中间临时表 暂存数据</p></li><li><p>优化group by语句<br />默认情况下，MySQL 会对GROUP BY分组的所有值进行排序,如果显式包括一个包含相同的列的 ORDER BY子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。<br />因此，如果查询包括 GROUP BY 但你并不想对分组的值进行排序，你可以指定 ORDER BY NULL禁止排序</p></li><li><p>优化join语句</p><p>MySQL中可以通过子查询来使用 SELECT 语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的 SQL 操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接(JOIN)…替代。</p><p>例子：假设要将所有没有订单记录的用户取出来，可以用下面这个查询完成：</p><p><code>SELECT col1 FROM customerinfo WHERE CustomerID NOT in (SELECT CustomerID FROM salesinfo )</code></p><p>如果使用连接(JOIN)… 来完成这个查询工作，速度将会有所提升。尤其是当 salesinfo表中对 CustomerID 建有索引的话，性能将会更好，查询如下：</p><p><code>SELECT col1 FROM customerinfo LEFT JOIN salesinfoON customerinfo.CustomerID=salesinfo.CustomerID WHERE salesinfo.CustomerID IS NULL</code></p><p>连接(JOIN)… 之所以更有效率一些，是因为 MySQL 不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p></li><li><p>优化union查询<br />MySQL通过创建并填充临时表的方式来执行union查询。除非确实要消除重复的行，否则建议使用union all。原因在于如果没有all这个关键词，MySQL会给临时表加上distinct选项，这会导致对整个临时表的数据做唯一性校验，这样做的消耗相当高。<br />高效：<br />SELECT COL1, COL2, COL3 FROM TABLE WHERE COL1 = 10<br />UNION ALL<br />SELECT COL1, COL2, COL3 FROM TABLE WHERE COL3= ‘TEST’;<br />低效：<br />SELECT COL1, COL2, COL3 FROM TABLE WHERE COL1 = 10<br />UNION<br />SELECT COL1, COL2, COL3 FROM TABLE WHERE COL3= ‘TEST’;</p></li><li><p>拆分复杂SQL为多个小SQL，避免大事务</p></li><li><p>使用truncate代替delete</p></li><li><p>使用合理的分页方式以提高分页效率</p></li></ol>]]></content>
    
    
    <summary type="html">sql优化</summary>
    
    
    
    <category term="sql优化" scheme="https://ymagic.github.io/categories/sql%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="sql优化" scheme="https://ymagic.github.io/tags/sql%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="https://ymagic.github.io/2020/09/02/hexo-da-jian-bo-ke/"/>
    <id>https://ymagic.github.io/2020/09/02/hexo-da-jian-bo-ke/</id>
    <published>2020-09-02T02:51:27.000Z</published>
    <updated>2022-08-05T02:30:43.133Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用hexo搭建博客的过程。<br />环境macOS Big Sur 11.6.6</p><span id="more"></span><h3 id="安装node"><a class="markdownIt-Anchor" href="#安装node"></a> 安装node</h3><p>在终端中执行 <code>brew install node</code> 即可安装</p><h3 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装hexo</h3><p>可参考<a href="https://hexo.io/zh-cn/docs/">官方文档</a></p><ul><li><p>命令 <code>pnpm install -g hexo-cli</code></p><p>​     使用 <code>hexo -v</code> 可以查看 hexo 的版本和依赖的版本包</p></li><li><p>新建文件夹blog</p></li><li><p>在终端中进入到blog的文件夹的路径下，执行 <code>hexo init</code> 对blog文件夹进行初始化</p></li><li><p>hexo g 生成静态页面； hexo s 将网站运行起来</p></li><li><p>访问 <a href="http://localhost:4000">http://localhost:4000</a>，出现 Hexo 默认页面，本地博客安装成功！</p></li></ul><h3 id="发布到远程仓库"><a class="markdownIt-Anchor" href="#发布到远程仓库"></a> 发布到远程仓库</h3><p>需要安装插件<code>hexo-deployer-git</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改hexo根目录下的<code>_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>发布到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="博客优化"><a class="markdownIt-Anchor" href="#博客优化"></a> 博客优化</h3><h4 id="修改博客站点信息"><a class="markdownIt-Anchor" href="#修改博客站点信息"></a> 修改博客站点信息</h4><p>修改hexo根目录下的<code>_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Daniel的博客  #网站标题</span><br><span class="line">subtitle: &#x27;&#x27;  #网站副标题</span><br><span class="line">description: &#x27;随手记录自己的学习过程&#x27;  #网站描述</span><br><span class="line">keywords:</span><br><span class="line">author: Daniel·young #作者</span><br><span class="line">language: zh-CN #博客的语言</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27; #博客的时区</span><br></pre></td></tr></table></figure><h4 id="使用pure主题"><a class="markdownIt-Anchor" href="#使用pure主题"></a> 使用pure主题</h4><p>pure主题地址:<a href="https://github.com/cofess/hexo-theme-pure.git">https://github.com/cofess/hexo-theme-pure.git</a></p><p>克隆pure主题到本地,终端切到博客的根目录下，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br></pre></td></tr></table></figure><p>修改hexo根目录下的<code>_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: pure</span><br></pre></td></tr></table></figure><h4 id="安装插件"><a class="markdownIt-Anchor" href="#安装插件"></a> 安装插件</h4><p>在终端中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-generator-json-content --save</span><br><span class="line"></span><br><span class="line">pnpm install hexo-generator-feed --save </span><br><span class="line"></span><br><span class="line">pnpm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line">pnpm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h4 id="文章浏览量统计-字数统计和阅读时长统计"><a class="markdownIt-Anchor" href="#文章浏览量统计-字数统计和阅读时长统计"></a> 文章浏览量统计、字数统计和阅读时长统计</h4><p>安装<code>hexo-wordcount</code>插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-wordcount --save  #字数统计插件</span><br></pre></td></tr></table></figure><p>修改<code>pure/_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># PV</span><br><span class="line">pv:</span><br><span class="line">  busuanzi:</span><br><span class="line">    enable: true  # 不蒜子统计</span><br><span class="line">        </span><br><span class="line"># wordcount</span><br><span class="line">postCount:</span><br><span class="line">  enable: true</span><br><span class="line">  wordcount: true  # 文章字数统计</span><br><span class="line">  min2read: true  # 阅读时长预计 </span><br></pre></td></tr></table></figure><h4 id="配置打赏信息"><a class="markdownIt-Anchor" href="#配置打赏信息"></a> 配置打赏信息</h4><p>修改<code>pure/_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Donate</span><br><span class="line">donate:</span><br><span class="line">  enable: true</span><br><span class="line">  # 微信打赏</span><br><span class="line">  wechatpay:</span><br><span class="line">    qrcode: images/donate/wechatpayimg.jpg  #在主题目录的source文件夹中进行图片设定</span><br><span class="line">    title: 微信支付</span><br><span class="line">  # 支付宝打赏</span><br><span class="line">  alipay: </span><br><span class="line">    qrcode: images/donate/alipayimg.jpg  #在主题目录的source文件夹中进行图片设定</span><br><span class="line">    title: 支付宝</span><br></pre></td></tr></table></figure><h4 id="开启评论功能"><a class="markdownIt-Anchor" href="#开启评论功能"></a> 开启评论功能</h4><p>修改<code>pure/_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">  type:  valine # 启用哪种评论系统</span><br></pre></td></tr></table></figure><p>Valine一个无后端的评论框工具，其依赖于 Leancloud 开发，所以使用前需要先注册 Leancloud 账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">valine: # Valine官方地址. https://valine.js.org</span><br><span class="line">  appid:  # 你的leancloud应用appid</span><br><span class="line">  appkey:  # 你的leancloud应用appkey</span><br><span class="line">  notify: false #是否开启评论邮件提醒 , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  meta: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line">  visitor: ture # Article reading statistic https://valine.js.org/visitor.html</span><br><span class="line">  highlight: ture</span><br><span class="line">  recordIp: ture</span><br></pre></td></tr></table></figure><h4 id="开启搜索功能"><a class="markdownIt-Anchor" href="#开启搜索功能"></a> 开启搜索功能</h4><p>修改<code>pure/_config.yml</code>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  insight: true #内置搜索功能</span><br><span class="line">  baidu: false #百度搜索功能，不可以同时使用</span><br></pre></td></tr></table></figure><h4 id="文章链接转静态短地址"><a class="markdownIt-Anchor" href="#文章链接转静态短地址"></a> 文章链接转静态短地址</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO,可以用hexo-permalink-pinyin插件使在生成文章时生成中文拼音的永久链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure><p>hexo根目录下的<code>_config.yml</code>配置文件中，新增以下配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: ture</span><br><span class="line">  separator: &#x27;-&#x27;</span><br></pre></td></tr></table></figure><h4 id="页面静态资源压缩"><a class="markdownIt-Anchor" href="#页面静态资源压缩"></a> 页面静态资源压缩</h4><p>为提高页面渲染速度，需要对页面的静态资源进行压缩，包括 css、js 和 html 等文件。</p><p>可以使用 hexo-neat 插件进行压缩。hexo-neat 配置简单，无需额外命令，我们只需使用原本的调试、部署命令就可以自动完成静态资源的压缩。</p><p>安装hexo-neat插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>在站点配置文件_config.yml 中添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line">neat_enable: true</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;*.min.css&#x27;</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;*.min.js&#x27;</span><br></pre></td></tr></table></figure><h4 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h4><p>需要先更换markdown的渲染器</p><p>删除原来的渲染器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm un hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>下载新渲染器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><p>在站点配置文件_config.yml 中添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#hexo-renderer-markdown-it-plus</span><br><span class="line">#hexo-renderer-markdown-it-plus</span><br><span class="line">markdown_it_plus:</span><br><span class="line">  highlight: true</span><br><span class="line">  html: true</span><br><span class="line">  xhtmlOut: true</span><br><span class="line">  breaks: true</span><br><span class="line">  langPrefix:</span><br><span class="line">  linkify: true</span><br><span class="line">  typographer:</span><br><span class="line">  quotes: “”‘’</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-katex #支持katex公式</span><br><span class="line">    - markdown-it-mark #支持==marked== →inserted</span><br><span class="line">    - markdown-it-ins #支持++Inserted++ 下划线， ~~Del~~ 删除线</span><br><span class="line">    - markdown-it-sub #支持H~2~O →H2O下标</span><br><span class="line">    - markdown-it-sup #支持X^2^ →X2上标</span><br><span class="line">    - markdown-it-footnote #支持引入参考文献。emmm就是上标数字，最后附上文献那种</span><br></pre></td></tr></table></figure><ul><li>markdown-it-mark #支持<code>==marked==</code> → <mark>marked</mark></li><li>markdown-it-ins #支持<code>++Inserted++</code> → <ins>Inserted</ins>， <code>~~Del~~</code> → <s>Del</s></li><li>markdown-it-sub #支持<code>H~2~O</code> → H<sub>2</sub>O</li><li>markdown-it-sup #支持<code>X^2^</code> → X<sup>2</sup></li><li>markdown-it-footnote #支持引入参考文献。就是上标数字，最后附上文献那种</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录使用hexo搭建博客的过程。&lt;br /&gt;
环境macOS Big Sur 11.6.6&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="https://ymagic.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://ymagic.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>流量控制策略之限流</title>
    <link href="https://ymagic.github.io/2019/12/02/liu-liang-kong-zhi-ce-lue-zhi-xian-liu/"/>
    <id>https://ymagic.github.io/2019/12/02/liu-liang-kong-zhi-ce-lue-zhi-xian-liu/</id>
    <published>2019-12-02T07:45:03.000Z</published>
    <updated>2022-07-19T09:13:33.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景描述"><a class="markdownIt-Anchor" href="#场景描述"></a> 场景描述</h1><p>由于业务应用系统的负载能力有限，为了防止非预期的请求对系统压力过大而拖垮业务应用系统<br />也就是面对大流量时，如何进行流量控制？</p><span id="more"></span><p>在开发高并发系统时可以采用三种方式用于保护系统：缓存、降级和限流</p><ul><li>缓存：缓存的目的是提升系统访问速度和增大系统处理容量</li><li>降级：降级是当服务出现问题或者影响到核心流程时，需要暂时屏蔽掉，待高峰或者问题解决后再打开</li><li>限流：限流的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理</li></ul><p>缓存的目的是提升系统访问速度和增大系统能处理的容量，可谓是抗高并发流量的银弹；而降级是当服务出问题或者影响到核心流程的性能则需要暂时屏蔽掉，待高峰或者问题解决后再打开；而有些场景并不能用缓存和降级来解决，比如稀缺资源（秒杀、抢购）、写服务（如评论、下单）、频繁的复杂查询（评论的最后几页），因此需有一种手段来限制这些场景的并发/请求量，即限流。</p><p>系统在设计之初就会有一个预估容量，长时间超过系统能承受的TPS/QPS阈值，系统可能会被压垮，最终导致整个服务不够用。为了避免这种情况，我们就需要对接口请求进行限流。</p><p>限流的目的是通过对并发访问请求进行限速或者一个时间窗口内的的请求数量进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待。</p><p>一般开发高并发系统常见的限流模式有控制并发和控制速率，一个是限制并发的总数量（比如数据库连接池、线程池），一个是限制并发访问的速率（如nginx的limit_conn模块，用来限制瞬时并发连接数），另外还可以限制单位时间窗口内的请求数量（如Guava的RateLimiter、nginx的limit_req模块，限制每秒的平均速率）。其他还有如限制远程接口调用速率、限制MQ的消费速率。另外还可以根据网络连接数、网络流量、CPU或内存负载等来限流。</p><p>本文主要介绍应用级限流方法</p><h1 id="应用级限流"><a class="markdownIt-Anchor" href="#应用级限流"></a> 应用级限流</h1><h2 id="控制并发数量"><a class="markdownIt-Anchor" href="#控制并发数量"></a> 控制并发数量</h2><p>属于一种较常见的限流手段，在实际应用中可以通过信号量机制（如Java中的Semaphore）来实现。 操作系统的信号量是个很重要的概念，Java 并发库 的Semaphore 可以很轻松完成信号量控制，Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboService</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">permit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            permit.acquire();</span><br><span class="line">            <span class="comment">//业务逻辑处理</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            permit.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，虽然有30个线程在执行，但是只允许10个并发的执行。Semaphore的构造方法Semaphore(int permits) 接受一个整型的数字，表示可用的许可证数量。Semaphore(10)表示允许10个线程获取许可证，也就是最大并发数是10。Semaphore的用法也很简单，首先线程使用Semaphore的acquire()获取一个许可证，使用完之后调用release()归还许可证，还可以用tryAcquire()方法尝试获取许可证，信号量的本质是控制某个资源可被同时访问的个数，在一定程度上可以控制某资源的访问频率，但不能精确控制，控制访问频率的模式见下文描述。</p><h2 id="控制访问频率"><a class="markdownIt-Anchor" href="#控制访问频率"></a> 控制访问频率</h2><p>常见的限流算法有：计数器、漏桶、令牌桶。</p><h3 id="计数器"><a class="markdownIt-Anchor" href="#计数器"></a> 计数器</h3><p>采用计数器实现限流有点简单粗暴，一般我们会限制一秒钟的能够通过的请求数，比如限流qps为100，算法的实现思路就是从第一个请求进来开始计时，在接下去的1s内，每来一个请求，就把计数加1，如果累加的数字达到了100，那么后续的请求就会被全部拒绝。等到1s结束后，把计数恢复成0，重新开始计数。</p><p>具体的实现可以是这样的：对于每次服务调用，可以通过 AtomicLong#incrementAndGet()方法来给计数器加1并返回最新值，通过这个最新值和阈值进行比较。</p><p>这种实现方式，相信大家都知道有一个弊端：如果我在单位时间1s内的前10ms，已经通过了100个请求，那后面的990ms，只能眼巴巴的把请求拒绝，我们把这种现象称为“突刺现象”</p><h3 id="漏桶算法"><a class="markdownIt-Anchor" href="#漏桶算法"></a> 漏桶算法</h3><p>漏桶算法的思路很简单，水（请求）先进入到漏桶里，漏桶以一定的速度出水（接口有响应速率），当水流入速度过大会直接溢出（访问频率超过接口响应速率），可以看出漏桶算法能强行限制数据的传输速率。</p><p><img src="../images/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5%E4%B9%8B%E9%99%90%E6%B5%81/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95.png" alt="漏桶算法" /></p><p>可见这里有两个变量,一个是桶的大小,支持流量突发增多时可以存多少的水(burst),另一个是水桶漏洞的大小(rate)。</p><p>因为漏桶的漏出速率是固定的参数,所以,即使网络中不存在资源冲突(没有发生拥塞),漏桶算法也不能使流突发(burst)到端口速率.因此,漏桶算法对于存在突发特性的流量来说缺乏效率.</p><h3 id="令牌桶算法"><a class="markdownIt-Anchor" href="#令牌桶算法"></a> 令牌桶算法</h3><p>令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务，令牌桶算法通过发放令牌，根据令牌的rate频率做请求频率限制，容量限制等。</p><p><img src="/images/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5%E4%B9%8B%E9%99%90%E6%B5%81/%E4%BB%A4%E7%89%8C%E6%A1%B61.png" alt="令牌桶算法1" />   <img src="/images/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5%E4%B9%8B%E9%99%90%E6%B5%81/%E4%BB%A4%E7%89%8C%E6%A1%B62.png" alt="令牌桶算法2" /></p><p>令牌桶算法</p><ol><li>每过1/r秒桶中增加一个令牌。</li><li>桶中最多存放b个令牌，如果桶满了，新放入的令牌会被丢弃。</li><li>当一个n字节的数据包到达时，消耗n个令牌，然后发送该数据包。</li><li>如果桶中可用令牌小于n，则该数据包将被缓存或丢弃。</li></ol><p>令牌桶控制的是一个时间窗口内通过的数据量，在API层面我们常说的QPS、TPS，正好是一个时间窗口内的请求量或者事务量，只不过时间窗口限定在1s罢了。以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。令牌桶的另外一个好处是可以方便的改变速度，一旦需要提高速率，则按需提高放入桶中的令牌的速率。</p><p>通常使用Google开源工具包Guava提供的限流工具类RateLimiter来实现控制速率，该类基于令牌桶算法来完成限流，非常易于使用，而且非常高效。如我们不希望每秒的任务提交超过1个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="type">RateLimiter</span> <span class="variable">limiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">1.0</span>); <span class="comment">// 这里的1表示每秒允许处理的量为1个</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">waitTime</span> <span class="operator">=</span> limiter.acquire(i);<span class="comment">// 请求RateLimiter, 超过permits会被阻塞</span></span><br><span class="line">      System.out.println(<span class="string">&quot;cutTime=&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; call execute:&quot;</span> + i + <span class="string">&quot; waitTime:&quot;</span> + waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(<span class="string">&quot;start time:&quot;</span> + start);</span><br><span class="line">    System.out.println(<span class="string">&quot;end time:&quot;</span> + end);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先通过RateLimiter.create(1.0);创建一个限流器，参数代表每秒生成的令牌数，通过limiter.acquire(i);来以阻塞的方式获取令牌，令牌桶算法允许一定程度的突发（允许消费未来的令牌），所以可以一次性消费i个令牌；当然也可以通过tryAcquire(int permits, long timeout, TimeUnit unit)来设置等待超时时间的方式获取令牌，如果超timeout为0，则代表非阻塞，获取不到立即返回，支持阻塞或可超时的令牌消费。</p><p>从输出来看，RateLimiter支持预消费，比如在acquire(5)时，等待时间是4秒，是上一个获取令牌时预消费了3个令牌，固需要等待3*1秒，然后又预消费了5个令牌，以此类推。</p><h3 id="滑动窗口"><a class="markdownIt-Anchor" href="#滑动窗口"></a> 滑动窗口</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;场景描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#场景描述&quot;&gt;&lt;/a&gt; 场景描述&lt;/h1&gt;
&lt;p&gt;由于业务应用系统的负载能力有限，为了防止非预期的请求对系统压力过大而拖垮业务应用系统&lt;br /&gt;
也就是面对大流量时，如何进行流量控制？&lt;/p&gt;</summary>
    
    
    
    <category term="流量控制" scheme="https://ymagic.github.io/categories/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
    <category term="限流" scheme="https://ymagic.github.io/categories/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/%E9%99%90%E6%B5%81/"/>
    
    
    <category term="流量控制" scheme="https://ymagic.github.io/tags/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
    
    <category term="限流" scheme="https://ymagic.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://ymagic.github.io/2019/10/02/redis/"/>
    <id>https://ymagic.github.io/2019/10/02/redis/</id>
    <published>2019-10-02T02:11:31.000Z</published>
    <updated>2022-07-19T07:25:46.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-特点"><a class="markdownIt-Anchor" href="#redis-特点"></a> Redis 特点</h1><p>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。<br />Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br />Redis支持数据的备份，即master-slave模式的数据备份。</p><h1 id="redis-优势"><a class="markdownIt-Anchor" href="#redis-优势"></a> Redis 优势</h1><p>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。<br />丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。<br />原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<br />丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p><p>Redis value的数据结构 String、Hash、List、Set、ZSet</p><h1 id="string字符串"><a class="markdownIt-Anchor" href="#string字符串"></a> String(字符串)</h1><ul><li>存储最简单的key-value结构</li><li>value可以是字符串、整数或者浮点型</li><li>可以对整个字符串或者字符串的一部分执行操作</li><li>对整数和浮点数执行自增或自减操作</li></ul><h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2><ul><li>常规key-value缓存应用</li><li>分布式id生成器</li></ul><h1 id="list列表"><a class="markdownIt-Anchor" href="#list列表"></a> list(列表)</h1><ul><li>一个链表，链表上的每各节点都包含了一个字符串，字符串可以重复</li><li>可以从链表的两端推入或者拉出元素</li><li>根据偏移量对链表进行修剪</li><li>读取单个或者多个元素</li><li>根据值查找或者移除元素</li></ul><h2 id="使用场景-2"><a class="markdownIt-Anchor" href="#使用场景-2"></a> 使用场景</h2><ul><li>最新消息排行等功能</li><li>消息队列</li><li>关注列表，粉丝列表</li></ul><h1 id="set集合"><a class="markdownIt-Anchor" href="#set集合"></a> set(集合)</h1><ul><li>包含字符串的无序收集器，并且被包含的每个字符串都是独一无二，各不相同的，即不能重复</li><li>可以添加、获取、移除单个元素</li><li>检查一个元素是否存在于集合中</li><li>计算交集、并集、差集</li><li>从集合里面随机获取元素</li></ul><h2 id="使用场景-3"><a class="markdownIt-Anchor" href="#使用场景-3"></a> 使用场景</h2><ul><li>共同好友，共同喜好，二度好友</li><li>统计网站访问IP（利用唯一性，统计访问网站的所有独立IP）</li><li>好友推荐（好友推荐时，根据tag求交集，大于某个阈值就可以推荐）</li></ul><h1 id="hash散列"><a class="markdownIt-Anchor" href="#hash散列"></a> hash(散列)</h1><ul><li>是一个string类型的field和value的映射表</li><li>包含键值对的无序散列表，键不能重复</li><li>可以添加、获取、移除单个键值对</li><li>获取所有键值对</li></ul><h2 id="使用场景-4"><a class="markdownIt-Anchor" href="#使用场景-4"></a> 使用场景</h2><ul><li>hash特别适合用于存储对象</li><li>存储用户信息（能单独修改用户某一属性信息）</li></ul><h1 id="zset有序集合"><a class="markdownIt-Anchor" href="#zset有序集合"></a> zset(有序集合)</h1><ul><li>有序集合的键被称为成员，每个成员都是各不相同的</li><li>而有序集合的值被称为分值，分值必须为浮点数</li><li>有序集合是字符串成员与浮点数分值之间的有序映射，元素的排列顺序由分值的大小决定</li><li>可以添加、获取、删除单个元素</li><li>根据分值范围或者成员来获取元素</li><li>有序集合是redis里面唯一一个既可以根据成员访问元素（这一点和散列一样），又可以根据分值以及分值的排列顺序来访问元素的结构</li></ul><h2 id="使用场景-5"><a class="markdownIt-Anchor" href="#使用场景-5"></a> 使用场景</h2><ul><li>排行榜</li><li>带权重的消息队列</li></ul><h1 id="redis-keys命令"><a class="markdownIt-Anchor" href="#redis-keys命令"></a> Redis keys命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">del (key)   用于在key存在是删除key</span><br><span class="line"></span><br><span class="line">dump (key)   序列化给定的key,并返回被序列化的值</span><br><span class="line"></span><br><span class="line">exists (key)   检查给定的key是否存在</span><br><span class="line"></span><br><span class="line">expire (key seconds)  为给定key设置过期时间</span><br><span class="line"></span><br><span class="line">expire (key timestamp)    EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)</span><br><span class="line"></span><br><span class="line">pexpire (key milliseconds) 设置 key 的过期时间以毫秒计</span><br><span class="line"></span><br><span class="line">pexpiret (key milliseconds-timestamp)   设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</span><br><span class="line"></span><br><span class="line">keys (pattern)   查找所有符合给定模式( pattern)的 key</span><br><span class="line"></span><br><span class="line">move (key dbindex)   将当前数据库的 key 移动到有dbindex索引的数据库</span><br><span class="line"></span><br><span class="line">persist (key) 移除 key 的过期时间，key 将持久保持</span><br><span class="line"></span><br><span class="line">pttl (key) 以毫秒为单位返回 key 的剩余的过期时间。</span><br><span class="line"></span><br><span class="line">ttl (key) 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)</span><br><span class="line"></span><br><span class="line">rename (key newkey) 修改 key 的名称</span><br><span class="line"></span><br><span class="line">renamenx (key newkey) 仅当 newkey 不存在时，将 key 改名为 newkey </span><br><span class="line"></span><br><span class="line">type (key) 返回key所储存的值的类型</span><br><span class="line"></span><br><span class="line">dbsize  返回当前数据库中的key的数目</span><br><span class="line"></span><br><span class="line">flushdb  删除当前选择数据库中所有key</span><br><span class="line"></span><br><span class="line">flushall  删除所有数据库中的所有key</span><br></pre></td></tr></table></figure><h1 id="string-操作命令"><a class="markdownIt-Anchor" href="#string-操作命令"></a> String 操作命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">set (key value)  设置给定key的value值</span><br><span class="line"></span><br><span class="line">get (key)  获取指定key的值</span><br><span class="line"></span><br><span class="line">setnx (key value)  只有在key不存在时设置key的值</span><br><span class="line"></span><br><span class="line">mset (key1 value1 key2 value2 ... keyn valuen)  同时设置一个或多个key-value值</span><br><span class="line"></span><br><span class="line">msetnx (key1 value1 key2 value2 ... keyn valuen) 所有给定 key 都不存在时，同时设置一个或多个 key-value 对</span><br><span class="line"></span><br><span class="line">setex (key timeout value) 给指定的key设置值及过期时间,单位：秒</span><br><span class="line"></span><br><span class="line">psetex (key milliseconds value) 给指定的key设置值及过期时间,单位：毫秒</span><br><span class="line"></span><br><span class="line">getrange (key start end) 获取存储在指定key中字符串的子字符串，字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)</span><br><span class="line"></span><br><span class="line">incr (key) 将key中存储的数字值增一，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 incr 操作，如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误，本操作的值限制在 64 位(bit)有符号数字表示之内</span><br><span class="line"></span><br><span class="line">decr (key) 将key中存储的数字值减一，如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 decr 操作，如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误，本操作的值限制在 64 位(bit)有符号数字表示之内</span><br><span class="line"></span><br><span class="line">incrby (key incr_amount) 将 key 中储存的数字加上指定的增量值,如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 incrby 命令,如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误,本操作的值限制在 64 位(bit)有符号数字表示之内</span><br><span class="line"></span><br><span class="line">decrby (key decr_amount) 将 key 所储存的值减去指定的减量值,</span><br><span class="line">如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 decrby 操作,如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误,本操作的值限制在 64 位(bit)有符号数字表示之内</span><br><span class="line"></span><br><span class="line">incrbyfloat (key incr_amount) 为 key 中所储存的值加上指定的浮点数增量值,如果 key 不存在，那么 INCRBYFLOAT 会先将 key 的值设为 0 ，再执行加法操作</span><br><span class="line"></span><br><span class="line">strlen (key)  获取key所存储字符串值的长度，当 key 储存的不是字符串值时，返回一个错误</span><br><span class="line"></span><br><span class="line">setrange (key offset value) 用指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始</span><br><span class="line"></span><br><span class="line">append (key value)  为指定的 key 追加值,如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样</span><br></pre></td></tr></table></figure><h1 id="list-操作命令"><a class="markdownIt-Anchor" href="#list-操作命令"></a> list 操作命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">rpush (key value1 ... valuen) 用于将一个或多个值插入到列表的尾部(最右边)</span><br><span class="line"></span><br><span class="line">lindex 通过索引获取列表中的元素，也可以使用负数下标，以 -1 表示列表的最后一个元素，-2 表示列表的倒数第二个元素，以此类推</span><br><span class="line"></span><br><span class="line">lrange (key start end)  返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</span><br><span class="line"></span><br><span class="line">rpoplpush (source_key destination_key)  移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span><br><span class="line"></span><br><span class="line">blpop (list1 list2 ... listn timeout)  移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span><br><span class="line"></span><br><span class="line">brpop (list1 list2 ... listn timeout) 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span><br><span class="line"></span><br><span class="line">brpoplpush (list another_list timeout)  从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span><br><span class="line"></span><br><span class="line">lrem (key count value)  根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。COUNT 的值可以是以下几种：</span><br><span class="line">count &gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT ,count &lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值, count = 0 : 移除表中所有与 VALUE 相等的值</span><br><span class="line"></span><br><span class="line">llen (key) 用于返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 ,如果 key 不是列表类型，返回一个错误</span><br><span class="line"></span><br><span class="line">ltrim (key start stop) 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</span><br><span class="line"></span><br><span class="line">lpop (key) 用于移除并返回列表的第一个元素</span><br><span class="line"></span><br><span class="line">rpop (key) 用于移除并返回列表的最后一个元素</span><br><span class="line"></span><br><span class="line">lpushx (key value1 value2 ... valuen) 将一个或多个值插入到已存在的列表头部，列表不存在时操作无效</span><br><span class="line"></span><br><span class="line">rpushx (key value1 value2 ... valuen) 将一个或多个值插入到已存在的列表尾部(最右边)，列表不存在时操作无效</span><br><span class="line"></span><br><span class="line">linsert (key before|after ecisting_value new_value) 用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。当列表不存在时，被视为空列表，不执行任何操作。如果 key 不是列表类型，返回一个错误</span><br><span class="line"></span><br><span class="line">lset (key index value)  通过索引来设置元素的值,当索引参数超出范围，或对一个空列表进行 lset 时，返回一个错误</span><br></pre></td></tr></table></figure><h1 id="hash-操作命令"><a class="markdownIt-Anchor" href="#hash-操作命令"></a> hash 操作命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hset (key field value)  为哈希表中的字段赋值，如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作，如果字段已经存在于哈希表中，旧值将被覆盖</span><br><span class="line"></span><br><span class="line">hsetnx (key field value)  为哈希表中不存在的的字段赋值 。如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。如果字段已经存在于哈希表中，操作无效。如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令</span><br><span class="line"></span><br><span class="line">hget (key field_name) 用于返回哈希表中指定字段的值</span><br><span class="line"></span><br><span class="line">hgetall (key) 返回哈希表中所有的字段和值，返回值中紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍</span><br><span class="line"></span><br><span class="line">hmset (key field1 value1 filed2 value2 ... filedn valuen)  同时将多个field-value(字段-值)对设置到哈希表中，此命令会覆盖哈希表中已存在的字段，如果哈希表不存在，会创建一个空哈希表，并执行 HMSET 操作</span><br><span class="line"></span><br><span class="line">hmget (key field1 field2 ... fieldn)  用于返回哈希表中一个或多个给定字段的值，如果不存在，返回nil值</span><br><span class="line"></span><br><span class="line">hexists (key field)  查询hash表中指定字段是否存在</span><br><span class="line"></span><br><span class="line">hincrby (key field incr_by_number) 用于为哈希表中的字段值加上指定增量值。增量也可以为负数，相当于对指定字段进行减法操作。如果哈希表的 key 不存在，一个新的哈希表被创建并执行 hincrby 命令。如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误</span><br><span class="line"></span><br><span class="line">hincrbyfloat (key field incr_by_number)  用于为哈希表中的字段值加上指定浮点数增量值.如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 </span><br><span class="line"></span><br><span class="line">hlen (key)  获取哈希表中字段的数量</span><br><span class="line"></span><br><span class="line">hdel (key field1 field2 ... fieldn) 用于删除哈希表 key 中的一个或多个指定字段，不存在的字段将被忽略</span><br><span class="line"></span><br><span class="line">hvals (key)  返回哈希表所有字段的值</span><br><span class="line"></span><br><span class="line">hkeys (key)  获取哈希表中的所有字段名</span><br></pre></td></tr></table></figure><h1 id="set-操作命令"><a class="markdownIt-Anchor" href="#set-操作命令"></a> set 操作命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sscan (key [match pattern] [count countnum]) 迭代集合键中的元素</span><br><span class="line"></span><br><span class="line">sadd (key value1 ... valuen) 将一个或多个元素加入到集合</span><br><span class="line"></span><br><span class="line">srem (key value1 ... valuen) 移除集合中的一个或多个成员元素，不存在的成员元素会被忽略</span><br><span class="line"></span><br><span class="line">smembers (key)  返回集合中的所有成员，不存在的集合可以视为空集合</span><br><span class="line"></span><br><span class="line">scard (key) 返回集合中的元素数量</span><br><span class="line"></span><br><span class="line">sismember (key value) 判断成员是否是集合成员</span><br><span class="line"></span><br><span class="line">sunion (key1 key2 ... keyn) 返回指定集合的并集</span><br><span class="line"></span><br><span class="line">sunionstore (destination_key key1 key2 ... keyn) 将给定集合的并集存储在指定的集合 destination 中</span><br><span class="line"></span><br><span class="line">sinter (key1 key2 ... keyn)  返回给定所有集合的交集，不存在的集合 key 被视为空集</span><br><span class="line"></span><br><span class="line">sinterstore (destination_key key1 key2 ... keyn) 将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖</span><br><span class="line"></span><br><span class="line">sdiff (key1 key2 ... keyn)  返回给定集合之间的差集</span><br><span class="line"></span><br><span class="line">sdiffstore (destination_key  key1 key2 ... keyn) 将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖</span><br><span class="line"></span><br><span class="line">spop (key) 用于移除并返回集合中的一个随机元素</span><br></pre></td></tr></table></figure><h1 id="sorted-set-操作命令"><a class="markdownIt-Anchor" href="#sorted-set-操作命令"></a> sorted set 操作命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">zcard (key) 计算集合中元素的数量</span><br><span class="line"></span><br><span class="line">zrange (key start stop [withscores])  返回有序集合中指定区域内的成员，按成员分数值递增排序，下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推，你也可以使用负数下标，以 -1 表示最后一个成员</span><br><span class="line"></span><br><span class="line">zrevrange (key start stop [withscores])  返回有序集合中指定区域内的成员，按成员分数值递减排序，下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推，你也可以使用负数下标，以 -1 表示最后一个成员</span><br><span class="line"></span><br><span class="line">zadd (key score1 value1 score2 value2 ... scoren valuen)  将一个或多个成员元素及其分数值加入到有序集当中,分数值可以是整数值或双精度浮点数</span><br><span class="line"></span><br><span class="line">acount (key min max) 计算有序集合中指定分数区间的成员数量</span><br><span class="line"></span><br><span class="line">zscore (key member) 返回有序集中，成员的分数值</span><br><span class="line"></span><br><span class="line">zincrby (key increment member) 对有序集合中指定成员的分数加上增量 increment,分数值可以是整数值或双精度浮点数,可正可负</span><br><span class="line"></span><br><span class="line">zrem (key member1 ... membern)  移除有序集中的一个或多个成员，不存在的成员将被忽略</span><br><span class="line"></span><br><span class="line">zrangebyscore (key min max [withscores] [limit offset count])  返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列,默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于) 例：zrangebyscore zset (1 5    1&lt;score&lt;=5     zrangebyscore zset -inf +inf 显示整个有序集</span><br><span class="line"></span><br><span class="line">zremrangebyscore (key min max) 移除有序集中，指定分数（score）区间内的所有成员</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -n 100000 -q    同时执行10万个请求测试性能</span><br></pre></td></tr></table></figure><h1 id="持久化"><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h1><h2 id="rdb"><a class="markdownIt-Anchor" href="#rdb"></a> RDB</h2><p>RDB是Redis用来进行持久化的一种方式，是把当前内存中的数据集快照写入磁盘，也就是 Snapshot 快照（数据库中所有键值对数据）。恢复时是将快照文件直接读到内存里<br />触发方式：自动触发和手动触发<br />自动触发：在 redis.conf 配置文件中的 SNAPSHOTTING 下</p><ul><li>save：这里是用来配置触发 Redis的持久化条件，也就是什么时候将内存中的数据保存到硬盘。默认如下配置：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1：表示900 秒内如果至少有 1 个 key 的值变化，则保存</span><br><span class="line">save 300 10：表示300 秒内如果至少有 10 个 key 的值变化，则保存</span><br><span class="line">save 60 10000：表示60 秒内如果至少有 10000 个 key 的值变化，则保存</span><br></pre></td></tr></table></figure><p>当然如果你只是用Redis的缓存功能，不需要持久化，那么你可以注释掉所有的 save 行来停用保存功能。可以直接一个空字符串来实现停用：save “”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli config set save &quot; &quot;</span><br></pre></td></tr></table></figure><ul><li>stop-writes-on-bgsave-error ：默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。如果Redis重启了，那么又可以重新开始接收数据了</li><li>rdbcompression ；默认值是yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。</li><li>rdbchecksum ：默认值是yes。在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</li><li>dbfilename ：设置快照的文件名，默认是 dump.rdb</li><li>dir：设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。使用上面的 dbfilename 作为保存的文件名<br />也就是说通过在配置文件中配置的 save 方式，当实际操作满足该配置形式时就会进行 RDB 持久化，将当前的内存快照保存在 dir 配置的目录中，文件名由配置的 dbfilename 决定</li></ul><h3 id="恢复数据"><a class="markdownIt-Anchor" href="#恢复数据"></a> 恢复数据</h3><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可，redis就会自动加载文件数据至内存了。Redis 服务器在载入 RDB 文件期间，会一直处于阻塞状态，直到载入工作完成为止</p><h3 id="rdbde的优势和劣势"><a class="markdownIt-Anchor" href="#rdbde的优势和劣势"></a> RDBDE的优势和劣势</h3><p>优势：</p><ul><li>RDB是一个非常紧凑(compact)的文件，它保存了redis 在某个时间点上的数据集。这种文件非常适合用于进行备份和灾难恢复。</li><li>生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li></ul><p>劣势：</p><ul><li>RDB方式数据没办法做到实时持久化/秒级持久化。因为bgsave每次运行都要执行fork操作创建子进程，属于重量级操作(内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑)，频繁执行成本过高(影响性能)</li><li>RDB文件使用特定二进制格式保存，Redis版本演进过程中有多个格式的RDB版本，存在老版本Redis服务无法兼容新版RDB格式的问题(版本不兼容)</li><li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改(数据有丢失)</li></ul><h2 id="aof"><a class="markdownIt-Anchor" href="#aof"></a> AOF</h2><p>AOF是通过保存Redis服务器所执行的写命令来记录数据库状态</p><h3 id="aof配置"><a class="markdownIt-Anchor" href="#aof配置"></a> AOF配置</h3><p>在 redis.conf 配置文件的 APPEND ONLY MODE 下：</p><ul><li>appendonly：默认值为no，也就是说redis 默认使用的是rdb方式持久化，如果想要开启 AOF 持久化方式，需要将 appendonly 修改为 yes。</li><li>appendfilename ：aof文件名，默认是&quot;appendonly.aof&quot;</li><li>appendfsync：aof持久化策略的配置；</li></ul><ol><li>no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快，但是不太安全；</li><li>always表示每次写入都执行fsync，以保证数据同步到磁盘，效率很低；</li><li>everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。通常选择 everysec ，兼顾安全性和效率。</li></ol><ul><li>no-appendfsync-on-rewrite：在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。   设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。默认值为no。</li><li>auto-aof-rewrite-percentage：默认值为100。aof自动重写配置，当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候，Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</li><li>auto-aof-rewrite-min-size：64mb。设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写。</li><li>aof-load-truncated：aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项，出现这种现象  redis宕机或者异常终止不会造成尾部不完整现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。默认值为 yes。</li></ul><h3 id="开启aof"><a class="markdownIt-Anchor" href="#开启aof"></a> 开启AOF</h3><p>将 redis.conf 的 appendonly 配置改为 yes 即可。<br />AOF 保存文件的位置和 RDB 保存文件的位置一样，都是通过 redis.conf 配置文件的 dir 配置,可以通过 config get dir 命令获取保存的路径</p><h3 id="aof文件恢复"><a class="markdownIt-Anchor" href="#aof文件恢复"></a> AOF文件恢复</h3><p>重启 Redis 之后就会进行 AOF 文件的载入。<br />异常修复命令：redis-check-aof --fix 进行修复</p><h3 id="aof重写"><a class="markdownIt-Anchor" href="#aof重写"></a> AOF重写</h3><p>由于AOF持久化是Redis不断将写命令记录到 AOF 文件中，随着Redis不断的进行，AOF 的文件会越来越大，文件越大，占用服务器内存越大以及 AOF 恢复要求时间越长。为了解决这个问题，Redis新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。可以使用命令 bgrewriteaof 来重写<br />AOF 文件重写并不是对原文件进行重新整理，而是直接读取服务器现有的键值对，然后用一条命令去代替之前记录这个键值对的多条命令，生成一个新的文件后去替换原来的 AOF 文件<br />AOF 文件重写触发机制：通过 redis.conf 配置文件中的 auto-aof-rewrite-percentage：默认值为100，以及auto-aof-rewrite-min-size：64mb 配置，也就是说默认Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。<br />这里再提一下，我们知道 Redis 是单线程工作，如果 重写 AOF 需要比较长的时间，那么在重写 AOF 期间，Redis将长时间无法处理其他的命令，这显然是不能忍受的。Redis为了克服这个问题，解决办法是将 AOF 重写程序放到子程序中进行，这样有两个好处：<br />1.子进程进行 AOF 重写期间，服务器进程（父进程）可以继续处理其他命令。<br />2.子进程带有父进程的数据副本，使用子进程而不是线程，可以在避免使用锁的情况下，保证数据的安全性<br />使用子进程解决了上面的问题，但是新问题也产生了：因为子进程在进行 AOF 重写期间，服务器进程依然在处理其它命令，这新的命令有可能也对数据库进行了修改操作，使得当前数据库状态和重写后的 AOF 文件状态不一致。<br />为了解决这个数据状态不一致的问题，Redis 服务器设置了一个 AOF 重写缓冲区，这个缓冲区是在创建子进程后开始使用，当Redis服务器执行一个写命令之后，就会将这个写命令也发送到 AOF 重写缓冲区。当子进程完成 AOF 重写之后，就会给父进程发送一个信号，父进程接收此信号后，就会调用函数将 AOF 重写缓冲区的内容都写到新的 AOF 文件中。<br />这样将 AOF 重写对服务器造成的影响降到了最低</p><h3 id="aof优缺点"><a class="markdownIt-Anchor" href="#aof优缺点"></a> AOF优缺点</h3><p>优点：</p><ol><li>AOF 持久化的方法提供了多种的同步频率，即使使用默认的同步频率每秒同步一次，Redis 最多也就丢失 1 秒的数据而已。</li><li>AOF 文件使用 Redis 命令追加的形式来构造，因此，即使 Redis 只能向 AOF 文件写入命令的片断，使用 redis-check-aof 工具也很容易修正 AOF 文件。</li><li>AOF 文件的格式可读性较强，这也为使用者提供了更灵活的处理方式。例如，如果我们不小心错用了 FLUSHALL 命令，在重写还没进行时，我们可以手工将最后的 FLUSHALL 命令去掉，然后再使用 AOF 来恢复数据。</li></ol><p>缺点：</p><ol><li>对于具有相同数据的的 Redis，AOF 文件通常会比 RDF 文件体积更大。</li><li>虽然 AOF 提供了多种同步的频率，默认情况下，每秒同步一次的频率也具有较高的性能。但在 Redis 的负载较高时，RDB 比 AOF 具好更好的性能保证。</li><li>RDB 使用快照的形式来持久化整个 Redis 数据，而 AOF 只是将每次执行的命令追加到 AOF 文件中，因此从理论上说，RDB 比 AOF 方式更健壮。官方文档也指出，AOF 的确也存在一些 BUG，这些 BUG 在 RDB 没有存在。</li></ol><h3 id="redis集群"><a class="markdownIt-Anchor" href="#redis集群"></a> Redis集群</h3><p>集群命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a 123456 --cluster create 172.17.114.46:6000 172.17.114.46:6001 172.17.114.46:6002 172.17.114.46:6003 172.17.114.46:6004 172.17.114.46:6005 --cluster-replicas 1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Redis学习</summary>
    
    
    
    <category term="Redis" scheme="https://ymagic.github.io/categories/Redis/"/>
    
    <category term="缓存" scheme="https://ymagic.github.io/categories/Redis/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="Redis" scheme="https://ymagic.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://ymagic.github.io/2018/12/09/lambda-biao-da-shi/"/>
    <id>https://ymagic.github.io/2018/12/09/lambda-biao-da-shi/</id>
    <published>2018-12-09T08:08:42.000Z</published>
    <updated>2022-07-19T07:17:03.199Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。<br />使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><span id="more"></span><h1 id="lambda表达式的重要特征"><a class="markdownIt-Anchor" href="#lambda表达式的重要特征"></a> Lambda表达式的重要特征:</h1><ul><li>可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。</li><li>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li>可选的大括号：如果主体包含了一个语句，就不需要使用大括号。</li><li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ul><h1 id="lambda表达式有3个部分"><a class="markdownIt-Anchor" href="#lambda表达式有3个部分"></a> Lambda表达式有3个部分</h1><ol><li>一个代码块</li><li>参数</li><li>自由变量的值，这是指非参数而且不在代码中定义的变量</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MathOperation</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">operation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类型声明</span></span><br><span class="line">        <span class="type">MathOperation</span> <span class="variable">add</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line">        <span class="comment">//不声明类型</span></span><br><span class="line">        <span class="type">MathOperation</span> <span class="variable">sub</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line">        <span class="comment">//带有大括号，带有返回语句</span></span><br><span class="line">        <span class="type">MathOperation</span> <span class="variable">mul</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;<span class="keyword">return</span> a*b; &#125;;</span><br><span class="line">        <span class="comment">//不带大括号及返回语句</span></span><br><span class="line">        <span class="type">MathOperation</span> <span class="variable">div</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt;  a / b;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;10 + 5 = &quot;</span>+ operator(<span class="number">10</span>, <span class="number">5</span>, add));</span><br><span class="line">        System.out.println(<span class="string">&quot;10 - 5 = &quot;</span>+ operator(<span class="number">10</span>, <span class="number">5</span>, sub));</span><br><span class="line">        System.out.println(<span class="string">&quot;10 * 5 = &quot;</span>+ operator(<span class="number">10</span>, <span class="number">5</span>, mul));</span><br><span class="line">        System.out.println(<span class="string">&quot;10 / 5 = &quot;</span>+ operator(<span class="number">10</span>, <span class="number">5</span>, div));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">operator</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, MathOperation mathOperation)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lambda表达式可以使用外围作用域中的变量（即自由变量），但只能引用值不会改变的变量，必须实际上是final变量（不可被后面的代码更改，也为隐性final）。<br />使用lambda表达式的重点是延时执行。毕竟，如果想要你寄执行代码，完全可以直接执行。希望以后再执行代码的原因有很多，如：</p><ul><li>在一个单独的线程中运行代码；</li><li>多次运行代码；</li><li>在算法适当的位置运行代码(例如，排序中的比较操作)；</li><li>发生某种情况时执行代码(如，点击了一个按钮，数据到达，等等)；</li><li>只在必要时才运行代码。</li></ul><h1 id="函数式接口"><a class="markdownIt-Anchor" href="#函数式接口"></a> 函数式接口</h1><p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda表达式，这种接口称为函数式接口(functional inaterface)<br />Arrays.sort方法，它的第二个参数需要一个Comparator实例，Comparator就是只有一个方法的接口，所以可以提供一个lambda表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] words = &#123;<span class="string">&quot;Mercury&quot;</span>, <span class="string">&quot;Venus&quot;</span>, <span class="string">&quot;Earth&quot;</span>, <span class="string">&quot;Mars&quot;</span>, <span class="string">&quot;Jupiter&quot;</span>, <span class="string">&quot;Saturn&quot;</span>&#125;;</span><br><span class="line">Arrays.sort(words, (first, second) -&gt; first.length() - second.length());</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    System.out.println(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用@FunctionalInterface注解来标记自己设计的函数式接口</p><h1 id="常用函数式接口"><a class="markdownIt-Anchor" href="#常用函数式接口"></a> 常用函数式接口</h1><table><thead><tr><th style="text-align:left">函数式接口</th><th style="text-align:center">参数类型</th><th style="text-align:left">返回类型</th><th style="text-align:center">抽象方法名</th><th style="text-align:left">描述</th><th style="text-align:left">其他方法</th></tr></thead><tbody><tr><td style="text-align:left">Runnable</td><td style="text-align:center">无</td><td style="text-align:left">void</td><td style="text-align:center">run</td><td style="text-align:left">作为无参或返回值的动作运行</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>Supplier&lt;T&gt;</code></td><td style="text-align:center">无</td><td style="text-align:left">void</td><td style="text-align:center">get</td><td style="text-align:left">提供一个T类型的值</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>Consumer&lt;T&gt;</code></td><td style="text-align:center">T</td><td style="text-align:left">void</td><td style="text-align:center">accept</td><td style="text-align:left">处理一个T类型的值</td><td style="text-align:left">andThen</td></tr><tr><td style="text-align:left"><code>BiConsumer&lt;T,U&gt;</code></td><td style="text-align:center">T, U</td><td style="text-align:left">void</td><td style="text-align:center">accept</td><td style="text-align:left">处理T和U类型的值</td><td style="text-align:left">andThen</td></tr><tr><td style="text-align:left"><code>Function&lt;T,R&gt;</code></td><td style="text-align:center">T</td><td style="text-align:left">R</td><td style="text-align:center">apply</td><td style="text-align:left">有一个T类型参数的函数</td><td style="text-align:left">compose, andThen, identity</td></tr><tr><td style="text-align:left"><code>BiFunction&lt;T,U,R&gt;</code></td><td style="text-align:center">T, U</td><td style="text-align:left">R</td><td style="text-align:center">apply</td><td style="text-align:left">有T和U类型参数的函数</td><td style="text-align:left">andThen</td></tr><tr><td style="text-align:left"><code>UnaryOperator&lt;T&gt;</code></td><td style="text-align:center">T</td><td style="text-align:left">T</td><td style="text-align:center">apply</td><td style="text-align:left">类型T上的一元操作符</td><td style="text-align:left">compose, andThen, identity</td></tr><tr><td style="text-align:left"><code>BinaryOperator&lt;T&gt;</code></td><td style="text-align:center">T, T</td><td style="text-align:left">T</td><td style="text-align:center">apply</td><td style="text-align:left">类型T上的二元操作符</td><td style="text-align:left">andThen, maxBy, identity</td></tr><tr><td style="text-align:left"><code>Predicate&lt;T&gt;</code></td><td style="text-align:center">T</td><td style="text-align:left">boolean</td><td style="text-align:center">test</td><td style="text-align:left">布尔值函数</td><td style="text-align:left">and, or, negate, isEqual</td></tr><tr><td style="text-align:left"><code>BiPredicate&lt;T,U&gt;</code></td><td style="text-align:center">T,U</td><td style="text-align:left">boolean</td><td style="text-align:center">test</td><td style="text-align:left">有两个参数的布尔值函数</td><td style="text-align:left">and, or, negate</td></tr></tbody></table><h1 id="基本类型的函数式接口"><a class="markdownIt-Anchor" href="#基本类型的函数式接口"></a> 基本类型的函数式接口</h1><table><thead><tr><th style="text-align:left">函数式接口</th><th style="text-align:center">参数类型</th><th style="text-align:center">返回类型</th><th style="text-align:center">抽象方法名</th></tr></thead><tbody><tr><td style="text-align:left">BooleanSupplier</td><td style="text-align:center">none</td><td style="text-align:center">boolean</td><td style="text-align:center">getAsBoolean</td></tr><tr><td style="text-align:left"><em>P</em>Supplier</td><td style="text-align:center">none</td><td style="text-align:center"><em>p</em></td><td style="text-align:center">getAs<em>P</em></td></tr><tr><td style="text-align:left"><em>P</em>Consumer</td><td style="text-align:center">p</td><td style="text-align:center">void</td><td style="text-align:center">accept</td></tr><tr><td style="text-align:left">Obj<em>P</em>consumer<code>&lt;T&gt;</code></td><td style="text-align:center">T, <em>p</em></td><td style="text-align:center">void</td><td style="text-align:center">accept</td></tr><tr><td style="text-align:left"><em>P</em>Function<code>&lt;T&gt;</code></td><td style="text-align:center"><em>p</em></td><td style="text-align:center">T</td><td style="text-align:center">apply</td></tr><tr><td style="text-align:left"><em>P</em>To<em>Q</em>Function</td><td style="text-align:center"><em>p</em></td><td style="text-align:center"><em>q</em></td><td style="text-align:center">applyAs<em>Q</em></td></tr><tr><td style="text-align:left">To<em>P</em>Function<code>&lt;T&gt;</code></td><td style="text-align:center">T</td><td style="text-align:center"><em>p</em></td><td style="text-align:center">applyAs<em>P</em></td></tr><tr><td style="text-align:left">To<em>P</em>BiFunction<code>&lt;T, U&gt;</code></td><td style="text-align:center">T, U</td><td style="text-align:center"><em>p</em></td><td style="text-align:center">applyAs<em>P</em></td></tr><tr><td style="text-align:left"><em>P</em>UnaryOperator</td><td style="text-align:center"><em>p</em></td><td style="text-align:center"><em>p</em></td><td style="text-align:center">applyAs<em>P</em></td></tr><tr><td style="text-align:left"><em>P</em>BinaryOperator</td><td style="text-align:center"><em>p</em>, <em>p</em></td><td style="text-align:center"><em>p</em></td><td style="text-align:center">applyAs<em>P</em></td></tr><tr><td style="text-align:left"><em>P</em>Predicate</td><td style="text-align:center"><em>p</em></td><td style="text-align:center">boolean</td><td style="text-align:center">test</td></tr></tbody></table><p>注：<em>p</em>, <em>q</em> 为int, long, double; <em>P</em>, <em>Q</em> 为Int, Long, Double</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。&lt;br /&gt;
使用 Lambda 表达式可以使代码变的更加简洁紧凑。&lt;/p&gt;</summary>
    
    
    
    <category term="java 8" scheme="https://ymagic.github.io/categories/java-8/"/>
    
    
    <category term="java8" scheme="https://ymagic.github.io/tags/java8/"/>
    
    <category term="Lambda" scheme="https://ymagic.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点</title>
    <link href="https://ymagic.github.io/2018/12/08/java-zhi-shi-dian/"/>
    <id>https://ymagic.github.io/2018/12/08/java-zhi-shi-dian/</id>
    <published>2018-12-08T15:45:03.000Z</published>
    <updated>2022-07-19T07:16:56.804Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>hashmap和treemap什么区别?低层数据结构是什么?</p></li><li><p>ThreadPool用过吗？都有什么参数?底层如何实现的?</p></li><li><p>sychnized和Lock什么区别?sychnized 什么情况情况是对象锁? 什么时候是全局锁为什么?</p></li><li><p>ThreadLocal 是什么底层如何实现?写一个例子呗?</p></li><li><p>volitile的工作原理?</p></li><li><p>cas知道吗如何实现的?</p></li><li><p>讲讲单例模式的几种实现?</p></li><li><p>如何定位问题?如何解决思路和处理方法</p></li><li><p>知道字节码吗?字节码都有哪些?Integer x =5,int y =5，比较x =y 都经过哪些步骤?</p></li><li><p>讲讲类加载机制呗都有哪些类加载器，这些类加载器都加载哪些文件?</p></li><li><p>手写一下类加载Demo</p></li><li><p>从写equals为什么一定要重写hashcode？hashcode相等两个类一定相等吗?</p></li><li><p>介绍一Java当中常用的下集合类</p></li><li><p>hashmap hastable 实现什么不同?concurrenthashtable的原理?</p></li><li><p>osgi是什么？如果实现的？</p></li><li><p>JVM的优化有哪些？都能达到什么效果</p></li><li><p>classforName(“java.lang.String”)和String classgetClassLoader() LoadClass(“java.lang.String”) 什么区别啊?</p></li><li><p>说说MySQL索引B+Tree机制</p></li><li><p>SQL执行计划详解？</p></li><li><p>索引优化的手段你平常用过哪些？</p></li><li><p>讲几个常用的sql优化手段</p></li><li><p>说一下dubbo的实现过程注册中心挂了可以继续通信吗??</p></li><li><p>dubbo当中的序列化协议有哪些?</p></li><li><p>简述一下你所知道的IO模型</p></li><li><p>dubbo复制均衡策略和高可用策略都有哪些?</p></li><li><p>为什么要进行系统拆分？拆分不用dubbo可以吗’dubbo和thrift什么区别啊?</p></li><li><p>tomcat的httpServer是如何实现的？</p></li><li><p>Tomcat线程模型和IO模型</p></li><li><p>Tomcat系统参数认识和调优？</p></li><li><p>为什么使用消息队列？消息队列有什么优点和缺点啊?</p></li><li><p>如何保证消息队列的高可用？如何保证消息不被重复消费？</p></li><li><p>spring都有哪些机制AOP底层如何实现IOC呢??</p></li><li><p>cgLib知道吗?JDK动态代理为什么只能使用接口？</p></li><li><p>使用mysq1索引都有哪些原则? ?索引什么数据结构? 3+tree 和B tree 什么区别?</p></li><li><p>请介绍一下JVM内存模型?gc的算法？</p></li><li><p>线上发送频繁full gc如何处理? CPU 使用率过高怎么办?</p></li><li><p>MySQL的储引擎详细分析</p></li><li><p>高并发系统的数据库设计需要注意哪些？</p></li><li><p>谈谈分布式事务如何架构？</p></li><li><p>动态扩容缩容的分库分表怎么来设计？</p></li><li><p>说说你了解到的分库分表中间件，以及他的原理</p></li><li><p>把一个未分库分表的系统切换成分库分表如何做？会遇到哪些问题?</p></li><li><p>分布式事务知道吗? 你们怎么解决的?</p></li><li><p>分库分表的优点是什么为什么要使用?</p></li><li><p>能不能手写一个RPC通信demo</p></li><li><p>分布式寻址方式都有哪些算法知道一致性hash吗?手写一下java实现代码??你若userId取摸分片，那我要查一段连续时间里的数据怎么办???</p></li><li><p>如何解决分库分表主键问题有什么实现方案??</p></li><li><p>redis和ehcache有什么区别?为什么redis的性能那么高？</p></li><li><p>redis的数据类型和使用场景?</p></li><li><p>reids的主从复制是怎么实现的redis的集群模式是如何实现的呢redis的key是如何寻址的啊?</p></li><li><p>使用redis如何设计分布式锁?使用zk可以吗?如何实现啊这两种哪个效率更高啊??</p></li><li><p>redis如何实现持久化的？</p></li><li><p>redis过期策略都有哪些?</p></li><li><p>kafka ，activemq,rabbitmq ，rocketmq都有什么优点，缺点啊?</p></li><li><p>如果让你写一个消息队列，该如何进行架构设计啊?说一下你的思路</p></li><li><p>说一下TCP 'IP四层?</p></li><li><p>http的工作流程？</p></li><li><p>http1.0 http1.1http2.0 具体哪些区别啊?</p></li><li><p>TCP三次握手，四层分手的工作流程画一下流程图为什么不是四次五次或者二次啊?</p></li><li><p>spring的源码中所用到的设计思想？</p></li><li><p>系统架构如何选择合适日志技术（log4j、log4j2、slf4j、jcl…….）</p></li><li><p>springAOP的原理，springAOP和Aspectj的关系，springAOP的源码问题</p></li><li><p>dubbo框架的底层通信原理</p></li><li><p>RPC通信原理，分布式通信原理</p></li><li><p>如何利用springCloud来架构微服务项目</p></li><li><p>如何正确使用docker技术</p></li><li><p>springMVC的底层原理、如何从源码来分析其原理</p></li><li><p>mybaits的底层实现原理，如何从源码来分析mybaits</p></li><li><p>mysql的索引原理，索引是怎么实现的</p></li><li><p>索引的底层算法、如何正确使用、优化索引</p></li><li><p>springboot如何快速构建系统</p></li><li><p>zk原理知道吗zk都可以干什么Paxos算法知道吗?说一下原理和实现?</p></li><li><p>如果让你写一个消息队列，该如何进行架构设计啊?说一下你的思路</p></li><li><p>分布式事务知道吗? 你们怎么解决的?</p></li><li><p>请问你做过哪些JVM优化?使用什么方法达到什么效果?</p></li></ol>]]></content>
    
    
    <summary type="html">java学习过程中的知识点整理</summary>
    
    
    
    <category term="知识点" scheme="https://ymagic.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="知识点" scheme="https://ymagic.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://ymagic.github.io/2018/12/08/dan-li-mo-shi/"/>
    <id>https://ymagic.github.io/2018/12/08/dan-li-mo-shi/</id>
    <published>2018-12-08T15:45:03.000Z</published>
    <updated>2022-07-19T07:15:58.950Z</updated>
    
    <content type="html"><![CDATA[<p>静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singletion</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singletion</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singletion <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletionHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletionHolder</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singletion</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singletion</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">单例模式</summary>
    
    
    
    <category term="设计模式" scheme="https://ymagic.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="单例模式" scheme="https://ymagic.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker实践笔记二</title>
    <link href="https://ymagic.github.io/2018/10/14/docker-shi-jian-bi-ji/"/>
    <id>https://ymagic.github.io/2018/10/14/docker-shi-jian-bi-ji/</id>
    <published>2018-10-14T03:58:59.000Z</published>
    <updated>2022-07-19T07:16:38.376Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04环境，实践docker</p><span id="more"></span><h2 id="docker配置国内镜像地址"><a class="markdownIt-Anchor" href="#docker配置国内镜像地址"></a> docker配置国内镜像地址</h2><p>在<code>/etc/docker/</code>目录下添加daemon.json文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后重启docker daemon服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装MySQL</h2><ul><li>拉取MySQL镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.23</span><br></pre></td></tr></table></figure><h2 id="启动mysql容器设置密码-端口映射"><a class="markdownIt-Anchor" href="#启动mysql容器设置密码-端口映射"></a> 启动MySQL容器（设置密码、端口映射）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 实例名称 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=密码 -d mysql:5.7.23</span><br></pre></td></tr></table></figure><ul><li>查看已经运行的docker镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure><ul><li>连接到镜像中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 镜像实例名 bash</span><br></pre></td></tr></table></figure><ul><li>查看MySQL状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql status</span><br></pre></td></tr></table></figure><ul><li>连接MySQL，设置root账号和密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;new_password&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql8.0以上版本使用如下修改密码</span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;admin1234&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>由于mysql中的root执行绑定在了localhost，因此需要对root进行授权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span> with grant option;</span><br></pre></td></tr></table></figure><ul><li>刷新MySQL系统权限相关表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>测试MySQL连接</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu 16.04环境，实践docker&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://ymagic.github.io/categories/docker/"/>
    
    <category term="笔记" scheme="https://ymagic.github.io/categories/docker/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="docker" scheme="https://ymagic.github.io/tags/docker/"/>
    
    <category term="笔记" scheme="https://ymagic.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="镜像" scheme="https://ymagic.github.io/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker实践笔记一：安装docker</title>
    <link href="https://ymagic.github.io/2018/10/12/docker-shi-jian-bi-ji-yi-an-zhuang-docker/"/>
    <id>https://ymagic.github.io/2018/10/12/docker-shi-jian-bi-ji-yi-an-zhuang-docker/</id>
    <published>2018-10-12T12:34:39.000Z</published>
    <updated>2022-07-19T07:16:43.608Z</updated>
    
    <content type="html"><![CDATA[<p>本文开发环境为Ubuntu16.04 LTS 64位系统，通过apt的docker官方源安装最新的Docker CE(Community Edition)，即Docker社区版。</p><span id="more"></span><p>针对Ubuntu Trusty, Wily, and Xenial，推荐安装<code>linux-image-extra-*</code>内核包，<code>linux-image-extra-*</code>包允许你使用aufs存储驱动</p><ul><li>更新包管理器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ul><li>安装推荐包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-image-extra-$(<span class="built_in">uname</span> -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><h2 id="docker安装"><a class="markdownIt-Anchor" href="#docker安装"></a> docker安装</h2><p>1.卸载旧版本docker</p><ul><li>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>2.更新系统软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>3.安装依赖包，使apt可以通过HTTPS使用存储库(repository)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates \</span><br><span class="line">    curl software-properties-common</span><br></pre></td></tr></table></figure><p>4.添加Docker官方GPG密钥<br />执行该命令时，如遇到长时间没有响应说明网络连接不到docker网站，需要使用代理进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \</span><br><span class="line">    sudo apt-key add -</span><br></pre></td></tr></table></figure><p>显示OK,表示添加成功.</p><p>5.添加仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br></pre></td></tr></table></figure><p>6.再次更新apt索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>7.安装docker</p><ul><li>查看可用版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br></pre></td></tr></table></figure><ul><li>安装指定版本 <code>&lt;VERSION&gt;</code>为版本号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce=&lt;VERSION&gt;</span><br></pre></td></tr></table></figure><ul><li>安装最新版Docker CE</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p>8.查看docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="验证docker"><a class="markdownIt-Anchor" href="#验证docker"></a> 验证Docker</h2><p>显示出版本信息，即安装成功。</p><ul><li>查看docker服务是否启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker status</span><br></pre></td></tr></table></figure><ul><li>若未启动，则启动docker服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><ul><li>确认docker已被正确安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>这个命令下载一个测试图片并且在容器(container)中运行，然后容器container运行，打印出相关信息，说明安装成功</p><h2 id="创建docker-group"><a class="markdownIt-Anchor" href="#创建docker-group"></a> 创建docker group</h2><p>docker进程(daemon)绑定在Unix套接字(socket)，而不是TCP端口(port)，由于Unix默认socket权限归root用户所有，其他用户可以通过sudo访问. 由此, docker进程通常使用root用户运行.</p><p>为了避免每次使用docker命令都不得不使用sudo, 创建名为docker的Unix group并add users to it. 当docker daemon 开始,docker group就会拥有Unix socket 的读写权限（read/writable）.</p><p>为docker group 添加用户user<br />1.使用具有sudo权限的用户登录Ubuntu<br />2.创建docker group</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure><p>3.添加登录用户到docker group用户组中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker</span><br></pre></td></tr></table></figure><p>4.更新用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><p>5.测试docker命令不用sudo是否可以正常使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文开发环境为Ubuntu16.04 LTS 64位系统，通过apt的docker官方源安装最新的Docker CE(Community Edition)，即Docker社区版。&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://ymagic.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://ymagic.github.io/tags/docker/"/>
    
    <category term="Ubuntu" scheme="https://ymagic.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker命令使用详解</title>
    <link href="https://ymagic.github.io/2018/10/01/docker-ming-ling-shi-yong-xiang-jie/"/>
    <id>https://ymagic.github.io/2018/10/01/docker-ming-ling-shi-yong-xiang-jie/</id>
    <published>2018-10-01T13:19:54.000Z</published>
    <updated>2022-07-19T07:16:17.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-容器生命周期管理"><a class="markdownIt-Anchor" href="#docker-容器生命周期管理"></a> docker 容器生命周期管理</h1><h2 id="docker-run"><a class="markdownIt-Anchor" href="#docker-run"></a> docker run</h2><p><strong>docker run:创建一个新容器并运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql2 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=密码 -d mysql:5.7</span><br></pre></td></tr></table></figure><p>以mysql:5.7镜像启动一个容器，指定容器名称为mysql2 映射端口号设置密码，并在后台运行</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项</span><br><span class="line">-d: 后台运行容器，并返回容器ID</span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用</span><br><span class="line">-p: 端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</span><br><span class="line">--name=&quot;nginx-lb&quot;: 为容器指定一个名称</span><br><span class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致</span><br><span class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致</span><br><span class="line">-h &quot;mars&quot;: 指定容器的hostname</span><br><span class="line">-e username=&quot;ritchie&quot;: 设置环境变量</span><br><span class="line">--env-file=[]: 从指定文件读入环境变量</span><br><span class="line">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行</span><br><span class="line">-m :设置容器使用内存最大值</span><br><span class="line">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型</span><br><span class="line">--link=[]: 添加链接到另一个容器</span><br><span class="line">--expose=[]: 开放一个端口或一组端口</span><br></pre></td></tr></table></figure><h2 id="docker-startstoprestart"><a class="markdownIt-Anchor" href="#docker-startstoprestart"></a> docker start/stop/restart</h2><p><strong>docker start/stop/restart :启动、停止或重启一个或多个容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="variable">$container_id</span></span><br></pre></td></tr></table></figure><p>启动一个ID为$container_id的容器</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a, --attach=false：启动一个容器并打印输出结果和错误</span><br><span class="line">-i, --interactive=false： 启动一个容器并进入交互模式</span><br><span class="line">-t, --time=10 ：停止或者重启容器的超时时间（秒），超时后系统将杀死进程。</span><br></pre></td></tr></table></figure><h2 id="docker-kill"><a class="markdownIt-Anchor" href="#docker-kill"></a> docker kill</h2><p><strong>docker kill :杀掉一个运行中的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> -s KILL 94c6b3c3f04a</span><br></pre></td></tr></table></figure><p>杀死一个ID为 94c6b3c3f04a 的容器，并向容器中发送KILL信号</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s, --signal=KILL  ：自定义发送至容器的信号</span><br></pre></td></tr></table></figure><h2 id="docker-rm"><a class="markdownIt-Anchor" href="#docker-rm"></a> docker rm</h2><p>** docker rm ：删除一个或多少容器 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> harrysun/lnmp</span><br><span class="line">docker <span class="built_in">rm</span> -l webapp/redis</span><br></pre></td></tr></table></figure><p>移除 harrysun/lnmp 的本地容器和移除 webapp/redis 容器的网络连接</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f, --force=false ：强行移除该容器，即使其正在运行</span><br><span class="line">-l, --link=false ：移除容器间的网络连接，而非容器本身</span><br><span class="line">-v, --volumes=false ：移除与容器关联的空间</span><br></pre></td></tr></table></figure><h2 id="docker-pauseunpause"><a class="markdownIt-Anchor" href="#docker-pauseunpause"></a> docker pause/unpause</h2><p><strong>docker pause/unpause:暂停/恢复容器中的所有进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="docker-create"><a class="markdownIt-Anchor" href="#docker-create"></a> docker create</h2><p><strong>docker create:创建一个新容器但不启动它</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create  --name myrunoob  nginx:latest </span><br></pre></td></tr></table></figure><p>使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob</p><h2 id="docker-exec"><a class="markdownIt-Anchor" href="#docker-exec"></a> docker exec</h2><p>** docker exec:在运行的容器中执行命令 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql2 bash</span><br></pre></td></tr></table></figure><p>以交互模式进入容器，并分配一个伪终端</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-d :分离模式: 在后台运行</span><br><span class="line">-i :即使没有附加也保持STDIN 打开</span><br><span class="line">-t :分配一个伪终端</span><br></pre></td></tr></table></figure><h1 id="容器操作"><a class="markdownIt-Anchor" href="#容器操作"></a> 容器操作</h1><h2 id="docker-ps"><a class="markdownIt-Anchor" href="#docker-ps"></a> docker ps</h2><p>** docker ps:列出容器 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>列出所有容器</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-a :显示所有的容器，包括未运行的。</span><br><span class="line">-f :根据条件过滤显示的内容。</span><br><span class="line">--format :指定返回值的模板文件。</span><br><span class="line">-l :显示最近创建的容器。</span><br><span class="line">-n :列出最近创建的n个容器。</span><br><span class="line">--no-trunc :不截断输出。</span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line">-s :显示总的文件大小。</span><br></pre></td></tr></table></figure><h2 id="docker-inspect"><a class="markdownIt-Anchor" href="#docker-inspect"></a> docker inspect</h2><p>** docker inspect:获取容器/镜像的元数据 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect mysql:5.6</span><br></pre></td></tr></table></figure><p>获取镜像mysql:5.6的元信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID | grep IPAdress</span><br></pre></td></tr></table></figure><p>查看容器ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f=<span class="string">&#x27;&#123;&#123;.Name&#125;&#125;&#x27;</span> $(docker ps -a -q)</span><br></pre></td></tr></table></figure><p>查看容器名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f=<span class="string">&#x27;&#123;&#123;.NetworkSetting.IPAddress&#125;&#125;&#x27;</span> mymysql</span><br></pre></td></tr></table></figure><p>查看容器mymysql的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f=<span class="string">&#x27;&#123;&#123;.Name&#125;&#125; &#123;&#123;.NetworkSettings.IPAddress&#125;&#125; &#123;&#123;.HostConfig.PortBindings&#125;&#125;&#x27;</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>列出所有容器对应的名称，端口以及ip</p><h2 id="docker-top"><a class="markdownIt-Anchor" href="#docker-top"></a> docker top</h2><p><strong>docker top:查看容器中运行的进程信息，支持 ps 命令参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top mymysql</span><br></pre></td></tr></table></figure><p>查询容器mymysql的进程信息</p><h2 id="docker-events"><a class="markdownIt-Anchor" href="#docker-events"></a> docker events</h2><p>** docker events:从服务器获取实时事件 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker events --since=<span class="string">&#x27;20180720&#x27;</span> --until=<span class="string">&#x27;20180808&#x27;</span></span><br></pre></td></tr></table></figure><p>显示docker 从2018/07/20到2018/08/08的所有事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker events -f <span class="string">&#x27;image=mysql:5.6&#x27;</span> --since=<span class="string">&#x27;20180720&#x27;</span></span><br></pre></td></tr></table></figure><p>显示docker镜像为mysql:5.6   20180720以后的所有事件</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：根据条件过滤事件；</span><br><span class="line">--since ：从指定的时间戳后显示所有事件;</span><br><span class="line">--until ：流水时间显示到指定的时间为止；</span><br></pre></td></tr></table></figure><h2 id="docker-logs"><a class="markdownIt-Anchor" href="#docker-logs"></a> docker logs</h2><p>** docker logs : 获取容器的日志 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f mysql5</span><br></pre></td></tr></table></figure><p>跟踪查看容器mysql5的日志输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since=<span class="string">&#x27;20180701&#x27;</span> --<span class="built_in">tail</span>=10 mysql5</span><br></pre></td></tr></table></figure><p>查看容器mysql5从2018/07/01以后的最新10条日志</p><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f : 跟踪日志输出</span><br><span class="line">--since :显示某个开始时间的所有日志</span><br><span class="line">-t : 显示时间戳</span><br><span class="line">--tail :仅列出最新N条容器日志</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">docker常用命令整理</summary>
    
    
    
    <category term="docker" scheme="https://ymagic.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://ymagic.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 开机黑屏</title>
    <link href="https://ymagic.github.io/2018/09/11/ubuntu16.04-kai-ji-hei-ping/"/>
    <id>https://ymagic.github.io/2018/09/11/ubuntu16.04-kai-ji-hei-ping/</id>
    <published>2018-09-11T02:49:32.000Z</published>
    <updated>2022-07-19T07:26:34.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h2><p>Ubuntu 16.04 在改用NVIDIA的专有显卡驱动后，开机黑屏</p><span id="more"></span><h2 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h2><p>桌面在运行时，显卡驱动不能安装</p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>开机时按Ctrl+Alt+F1进入tty命令行模式，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge nvidia*</span><br><span class="line">sudo apt-get install nvidia-current-updates-dve</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#描述&quot;&gt;&lt;/a&gt; 描述&lt;/h2&gt;
&lt;p&gt;Ubuntu 16.04 在改用NVIDIA的专有显卡驱动后，开机黑屏&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://ymagic.github.io/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="https://ymagic.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 小技巧</title>
    <link href="https://ymagic.github.io/2018/09/03/ubuntu-xiao-ji-qiao/"/>
    <id>https://ymagic.github.io/2018/09/03/ubuntu-xiao-ji-qiao/</id>
    <published>2018-09-03T02:54:31.000Z</published>
    <updated>2022-07-19T07:26:11.518Z</updated>
    
    <content type="html"><![CDATA[<p>在此记录我在使用 Ubuntu 16.04的过程中出现的问题，及解决方法</p><span id="more"></span><p>#依赖问题<br />使用 <code>dpkg -i *.deb</code> 的时候出现依赖没有安装<br />使用 <code>apt-get -f -y install</code>  解决依赖问题后再执行dpkg安装deb包</p><p>Error while loading shared libraries: libgthread-2.0.so.0<br />Step 1: Find the package that includes this library</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -S libgthread-2.0.so.0</span><br></pre></td></tr></table></figure><p>libglib2.0-0:amd64: /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0<br />Step 2: Install 32 bit version of the same so add i386 instead of amd 64.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libglib2.0-0:i386</span><br></pre></td></tr></table></figure><h2 id="测网速"><a class="markdownIt-Anchor" href="#测网速"></a> 测网速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">speedtest-cli</span><br></pre></td></tr></table></figure><h2 id="检测丢包率"><a class="markdownIt-Anchor" href="#检测丢包率"></a> 检测丢包率</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtr -r -c 30 -s 1024 www.baidu.com</span><br></pre></td></tr></table></figure><p>向百度发送数据包 每秒30个  每个1024个字节</p><p>mtr -h 提供帮助命令<br />mtr -v 显示mtr的版本信息<br />mtr -r 已报告模式显示<br />mtr -c 设置每秒发送数据包的数量<br />mtr -s 用来指定ping数据包的大小<br />mtr -n no-dns不对IP地址做域名解析<br />mtr -a 来设置发送数据包的IP地址 这个对一个主机由多个IP地址是有用的<br />mtr -i 使用这个参数来设置ICMP返回之间的要求默认是1秒<br />mtr -4 IPv4<br />mtr -6 IPv6</p><h2 id="依赖问题"><a class="markdownIt-Anchor" href="#依赖问题"></a> 依赖问题</h2><p>使用dpkg -i   *.deb 的时候出现依赖没有安装<br />使用apt-get -f -y install  解决依赖问题后再执行dpkg安装deb包</p><h2 id="最小化"><a class="markdownIt-Anchor" href="#最小化"></a> 最小化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>点击Launcher 图标最小化</p><h2 id="禁止开机自启动"><a class="markdownIt-Anchor" href="#禁止开机自启动"></a> 禁止开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> mysql</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d mysql <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><h2 id="dpkg-和-apt-get损坏修复"><a class="markdownIt-Anchor" href="#dpkg-和-apt-get损坏修复"></a> dpkg 和 apt-get损坏修复</h2><p>使用apt-get 或者dpkg安装包时，出现以下报错<br /><code>subprocess installed post-installation script returned error exit status 10</code></p><p>解决办法：<br />到 <code>/var/lib/dpkg/info</code> 目录下，删除以上出现包名字开头的文件后，执行 <code>sudo apt-get -f install</code></p><p><code>E: Sub-process /usr/bin/dpkg returned an error code (1)</code><br />解决办法：</p><ol><li>sudo mv /var/lib/dpkg/info /var/lib/dpkg/info_old //现将info文件夹更名</li><li>sudo mkdir /var/lib/dpkg/info //再新建一个新的info文件夹</li><li>sudo apt-get update,再$sudoapt-get -f install</li><li>sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old //执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_old文件夹下</li><li>sudo rm -rf /var/lib/dpkg/info //把自己新建的info文件夹删掉</li><li>sudo mv /var/lib/dpkg/info_old /var/lib/dpkg/info //把以前的info文件夹重新改回名字 到此问题顺利解决</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;在此记录我在使用 Ubuntu 16.04的过程中出现的问题，及解决方法&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://ymagic.github.io/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="https://ymagic.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 定时任务</title>
    <link href="https://ymagic.github.io/2018/03/01/springboot-ding-shi-ren-wu/"/>
    <id>https://ymagic.github.io/2018/03/01/springboot-ding-shi-ren-wu/</id>
    <published>2018-03-01T05:58:03.000Z</published>
    <updated>2022-07-19T07:25:52.252Z</updated>
    
    <content type="html"><![CDATA[<p>定时任务实现的几种方式：</p><p>Timer：这是java自带的java.util.Timer类，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能在指定时间运行。一般用的较少。<br />ScheduledExecutorService：也jdk自带的一个类；是基于线程池设计的定时任务类,每个调度任务都会分配到线程池中的一个线程去执行,也就是说,任务是并发执行,互不影响。<br />Spring Task：Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多。<br />Quartz：这是一个功能比较强大的的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来稍显复杂。</p><span id="more"></span><h2 id="springboot-整合-quartz"><a class="markdownIt-Anchor" href="#springboot-整合-quartz"></a> SpringBoot 整合 Quartz</h2><ul><li>添加依赖</li></ul><p>我使用的SpringBoot版本是2.0.0以上版本，在 <code>spring-boot-starter</code> 中已经包含了quartz的依赖，则可以直接使用 <code>spring-boot-starter-quartz</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建任务类TestQuartz, 该类主要继承了QuartzJobBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQuartz</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quartz task &quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置类QuartzConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">testQuartzDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(TestQuartz.class).withIdentity(<span class="string">&quot;testQuartz&quot;</span>).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">testQuartzTrigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleScheduleBuilder</span> <span class="variable">schedulebuilder</span> <span class="operator">=</span> SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInSeconds(<span class="number">10</span>) <span class="comment">//设置时间周期单位秒</span></span><br><span class="line">                .repeatForever();</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(testQuartzDetail())</span><br><span class="line">                .withIdentity(<span class="string">&quot;testQuartz&quot;</span>)</span><br><span class="line">                .withSchedule(schedulebuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;定时任务实现的几种方式：&lt;/p&gt;
&lt;p&gt;Timer：这是java自带的java.util.Timer类，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能在指定时间运行。一般用的较少。&lt;br /&gt;
ScheduledExecutorService：也jdk自带的一个类；是基于线程池设计的定时任务类,每个调度任务都会分配到线程池中的一个线程去执行,也就是说,任务是并发执行,互不影响。&lt;br /&gt;
Spring Task：Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多。&lt;br /&gt;
Quartz：这是一个功能比较强大的的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来稍显复杂。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://ymagic.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="https://ymagic.github.io/tags/SpringBoot/"/>
    
    <category term="Quartz" scheme="https://ymagic.github.io/tags/Quartz/"/>
    
  </entry>
  
</feed>
